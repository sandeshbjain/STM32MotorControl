
stm32motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000499c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08004b28  08004b28  00014b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d10  08004d10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d18  08004d18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000008c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a05a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015cb  00000000  00000000  0002a096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0002b668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b0  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020395  00000000  00000000  0002c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ef3  00000000  00000000  0004cc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7eb4  00000000  00000000  00056af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e9ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ad8  00000000  00000000  0011ea00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b0c 	.word	0x08004b0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004b0c 	.word	0x08004b0c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2uiz>:
 80008f4:	004a      	lsls	r2, r1, #1
 80008f6:	d211      	bcs.n	800091c <__aeabi_d2uiz+0x28>
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d211      	bcs.n	8000922 <__aeabi_d2uiz+0x2e>
 80008fe:	d50d      	bpl.n	800091c <__aeabi_d2uiz+0x28>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d40e      	bmi.n	8000928 <__aeabi_d2uiz+0x34>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	fa23 f002 	lsr.w	r0, r3, r2
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d102      	bne.n	800092e <__aeabi_d2uiz+0x3a>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	4770      	bx	lr
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	4770      	bx	lr

08000934 <__aeabi_d2f>:
 8000934:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000938:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800093c:	bf24      	itt	cs
 800093e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000942:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000946:	d90d      	bls.n	8000964 <__aeabi_d2f+0x30>
 8000948:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800094c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000950:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000954:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000958:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800095c:	bf08      	it	eq
 800095e:	f020 0001 	biceq.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000968:	d121      	bne.n	80009ae <__aeabi_d2f+0x7a>
 800096a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800096e:	bfbc      	itt	lt
 8000970:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000974:	4770      	bxlt	lr
 8000976:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800097e:	f1c2 0218 	rsb	r2, r2, #24
 8000982:	f1c2 0c20 	rsb	ip, r2, #32
 8000986:	fa10 f30c 	lsls.w	r3, r0, ip
 800098a:	fa20 f002 	lsr.w	r0, r0, r2
 800098e:	bf18      	it	ne
 8000990:	f040 0001 	orrne.w	r0, r0, #1
 8000994:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000998:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800099c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a0:	ea40 000c 	orr.w	r0, r0, ip
 80009a4:	fa23 f302 	lsr.w	r3, r3, r2
 80009a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ac:	e7cc      	b.n	8000948 <__aeabi_d2f+0x14>
 80009ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b2:	d107      	bne.n	80009c4 <__aeabi_d2f+0x90>
 80009b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b8:	bf1e      	ittt	ne
 80009ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009c2:	4770      	bxne	lr
 80009c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <__aeabi_uldivmod>:
 80009d4:	b953      	cbnz	r3, 80009ec <__aeabi_uldivmod+0x18>
 80009d6:	b94a      	cbnz	r2, 80009ec <__aeabi_uldivmod+0x18>
 80009d8:	2900      	cmp	r1, #0
 80009da:	bf08      	it	eq
 80009dc:	2800      	cmpeq	r0, #0
 80009de:	bf1c      	itt	ne
 80009e0:	f04f 31ff 	movne.w	r1, #4294967295
 80009e4:	f04f 30ff 	movne.w	r0, #4294967295
 80009e8:	f000 b96e 	b.w	8000cc8 <__aeabi_idiv0>
 80009ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009f4:	f000 f806 	bl	8000a04 <__udivmoddi4>
 80009f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a00:	b004      	add	sp, #16
 8000a02:	4770      	bx	lr

08000a04 <__udivmoddi4>:
 8000a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a08:	9d08      	ldr	r5, [sp, #32]
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	468c      	mov	ip, r1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f040 8083 	bne.w	8000b1a <__udivmoddi4+0x116>
 8000a14:	428a      	cmp	r2, r1
 8000a16:	4617      	mov	r7, r2
 8000a18:	d947      	bls.n	8000aaa <__udivmoddi4+0xa6>
 8000a1a:	fab2 f282 	clz	r2, r2
 8000a1e:	b142      	cbz	r2, 8000a32 <__udivmoddi4+0x2e>
 8000a20:	f1c2 0020 	rsb	r0, r2, #32
 8000a24:	fa24 f000 	lsr.w	r0, r4, r0
 8000a28:	4091      	lsls	r1, r2
 8000a2a:	4097      	lsls	r7, r2
 8000a2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a30:	4094      	lsls	r4, r2
 8000a32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a36:	0c23      	lsrs	r3, r4, #16
 8000a38:	fbbc f6f8 	udiv	r6, ip, r8
 8000a3c:	fa1f fe87 	uxth.w	lr, r7
 8000a40:	fb08 c116 	mls	r1, r8, r6, ip
 8000a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a48:	fb06 f10e 	mul.w	r1, r6, lr
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	d909      	bls.n	8000a64 <__udivmoddi4+0x60>
 8000a50:	18fb      	adds	r3, r7, r3
 8000a52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a56:	f080 8119 	bcs.w	8000c8c <__udivmoddi4+0x288>
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	f240 8116 	bls.w	8000c8c <__udivmoddi4+0x288>
 8000a60:	3e02      	subs	r6, #2
 8000a62:	443b      	add	r3, r7
 8000a64:	1a5b      	subs	r3, r3, r1
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a78:	45a6      	cmp	lr, r4
 8000a7a:	d909      	bls.n	8000a90 <__udivmoddi4+0x8c>
 8000a7c:	193c      	adds	r4, r7, r4
 8000a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a82:	f080 8105 	bcs.w	8000c90 <__udivmoddi4+0x28c>
 8000a86:	45a6      	cmp	lr, r4
 8000a88:	f240 8102 	bls.w	8000c90 <__udivmoddi4+0x28c>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	443c      	add	r4, r7
 8000a90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a94:	eba4 040e 	sub.w	r4, r4, lr
 8000a98:	2600      	movs	r6, #0
 8000a9a:	b11d      	cbz	r5, 8000aa4 <__udivmoddi4+0xa0>
 8000a9c:	40d4      	lsrs	r4, r2
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa4:	4631      	mov	r1, r6
 8000aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aaa:	b902      	cbnz	r2, 8000aae <__udivmoddi4+0xaa>
 8000aac:	deff      	udf	#255	; 0xff
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	d150      	bne.n	8000b58 <__udivmoddi4+0x154>
 8000ab6:	1bcb      	subs	r3, r1, r7
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	fa1f f887 	uxth.w	r8, r7
 8000ac0:	2601      	movs	r6, #1
 8000ac2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ac6:	0c21      	lsrs	r1, r4, #16
 8000ac8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000acc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d907      	bls.n	8000ae8 <__udivmoddi4+0xe4>
 8000ad8:	1879      	adds	r1, r7, r1
 8000ada:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ade:	d202      	bcs.n	8000ae6 <__udivmoddi4+0xe2>
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	f200 80e9 	bhi.w	8000cb8 <__udivmoddi4+0x2b4>
 8000ae6:	4684      	mov	ip, r0
 8000ae8:	1ac9      	subs	r1, r1, r3
 8000aea:	b2a3      	uxth	r3, r4
 8000aec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000af0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000af4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000af8:	fb08 f800 	mul.w	r8, r8, r0
 8000afc:	45a0      	cmp	r8, r4
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x10c>
 8000b00:	193c      	adds	r4, r7, r4
 8000b02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x10a>
 8000b08:	45a0      	cmp	r8, r4
 8000b0a:	f200 80d9 	bhi.w	8000cc0 <__udivmoddi4+0x2bc>
 8000b0e:	4618      	mov	r0, r3
 8000b10:	eba4 0408 	sub.w	r4, r4, r8
 8000b14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b18:	e7bf      	b.n	8000a9a <__udivmoddi4+0x96>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d909      	bls.n	8000b32 <__udivmoddi4+0x12e>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	f000 80b1 	beq.w	8000c86 <__udivmoddi4+0x282>
 8000b24:	2600      	movs	r6, #0
 8000b26:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2a:	4630      	mov	r0, r6
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	fab3 f683 	clz	r6, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d14a      	bne.n	8000bd0 <__udivmoddi4+0x1cc>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0x140>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 80b8 	bhi.w	8000cb4 <__udivmoddi4+0x2b0>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb61 0103 	sbc.w	r1, r1, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	468c      	mov	ip, r1
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0a8      	beq.n	8000aa4 <__udivmoddi4+0xa0>
 8000b52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b56:	e7a5      	b.n	8000aa4 <__udivmoddi4+0xa0>
 8000b58:	f1c2 0320 	rsb	r3, r2, #32
 8000b5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b60:	4097      	lsls	r7, r2
 8000b62:	fa01 f002 	lsl.w	r0, r1, r2
 8000b66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b6a:	40d9      	lsrs	r1, r3
 8000b6c:	4330      	orrs	r0, r6
 8000b6e:	0c03      	lsrs	r3, r0, #16
 8000b70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b74:	fa1f f887 	uxth.w	r8, r7
 8000b78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb06 f108 	mul.w	r1, r6, r8
 8000b84:	4299      	cmp	r1, r3
 8000b86:	fa04 f402 	lsl.w	r4, r4, r2
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x19c>
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b92:	f080 808d 	bcs.w	8000cb0 <__udivmoddi4+0x2ac>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 808a 	bls.w	8000cb0 <__udivmoddi4+0x2ac>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	443b      	add	r3, r7
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b281      	uxth	r1, r0
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb0:	fb00 f308 	mul.w	r3, r0, r8
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x1c4>
 8000bb8:	1879      	adds	r1, r7, r1
 8000bba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bbe:	d273      	bcs.n	8000ca8 <__udivmoddi4+0x2a4>
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d971      	bls.n	8000ca8 <__udivmoddi4+0x2a4>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	4439      	add	r1, r7
 8000bc8:	1acb      	subs	r3, r1, r3
 8000bca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bce:	e778      	b.n	8000ac2 <__udivmoddi4+0xbe>
 8000bd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bdc:	431c      	orrs	r4, r3
 8000bde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000be2:	fa01 f306 	lsl.w	r3, r1, r6
 8000be6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bee:	431f      	orrs	r7, r3
 8000bf0:	0c3b      	lsrs	r3, r7, #16
 8000bf2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bf6:	fa1f f884 	uxth.w	r8, r4
 8000bfa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bfe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c02:	fb09 fa08 	mul.w	sl, r9, r8
 8000c06:	458a      	cmp	sl, r1
 8000c08:	fa02 f206 	lsl.w	r2, r2, r6
 8000c0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x220>
 8000c12:	1861      	adds	r1, r4, r1
 8000c14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c18:	d248      	bcs.n	8000cac <__udivmoddi4+0x2a8>
 8000c1a:	458a      	cmp	sl, r1
 8000c1c:	d946      	bls.n	8000cac <__udivmoddi4+0x2a8>
 8000c1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c22:	4421      	add	r1, r4
 8000c24:	eba1 010a 	sub.w	r1, r1, sl
 8000c28:	b2bf      	uxth	r7, r7
 8000c2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c36:	fb00 f808 	mul.w	r8, r0, r8
 8000c3a:	45b8      	cmp	r8, r7
 8000c3c:	d907      	bls.n	8000c4e <__udivmoddi4+0x24a>
 8000c3e:	19e7      	adds	r7, r4, r7
 8000c40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c44:	d22e      	bcs.n	8000ca4 <__udivmoddi4+0x2a0>
 8000c46:	45b8      	cmp	r8, r7
 8000c48:	d92c      	bls.n	8000ca4 <__udivmoddi4+0x2a0>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4427      	add	r7, r4
 8000c4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c52:	eba7 0708 	sub.w	r7, r7, r8
 8000c56:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5a:	454f      	cmp	r7, r9
 8000c5c:	46c6      	mov	lr, r8
 8000c5e:	4649      	mov	r1, r9
 8000c60:	d31a      	bcc.n	8000c98 <__udivmoddi4+0x294>
 8000c62:	d017      	beq.n	8000c94 <__udivmoddi4+0x290>
 8000c64:	b15d      	cbz	r5, 8000c7e <__udivmoddi4+0x27a>
 8000c66:	ebb3 020e 	subs.w	r2, r3, lr
 8000c6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c72:	40f2      	lsrs	r2, r6
 8000c74:	ea4c 0202 	orr.w	r2, ip, r2
 8000c78:	40f7      	lsrs	r7, r6
 8000c7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c7e:	2600      	movs	r6, #0
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	462e      	mov	r6, r5
 8000c88:	4628      	mov	r0, r5
 8000c8a:	e70b      	b.n	8000aa4 <__udivmoddi4+0xa0>
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	e6e9      	b.n	8000a64 <__udivmoddi4+0x60>
 8000c90:	4618      	mov	r0, r3
 8000c92:	e6fd      	b.n	8000a90 <__udivmoddi4+0x8c>
 8000c94:	4543      	cmp	r3, r8
 8000c96:	d2e5      	bcs.n	8000c64 <__udivmoddi4+0x260>
 8000c98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e7df      	b.n	8000c64 <__udivmoddi4+0x260>
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e7d2      	b.n	8000c4e <__udivmoddi4+0x24a>
 8000ca8:	4660      	mov	r0, ip
 8000caa:	e78d      	b.n	8000bc8 <__udivmoddi4+0x1c4>
 8000cac:	4681      	mov	r9, r0
 8000cae:	e7b9      	b.n	8000c24 <__udivmoddi4+0x220>
 8000cb0:	4666      	mov	r6, ip
 8000cb2:	e775      	b.n	8000ba0 <__udivmoddi4+0x19c>
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	e74a      	b.n	8000b4e <__udivmoddi4+0x14a>
 8000cb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cbc:	4439      	add	r1, r7
 8000cbe:	e713      	b.n	8000ae8 <__udivmoddi4+0xe4>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	e724      	b.n	8000b10 <__udivmoddi4+0x10c>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd0:	f000 fd32 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd4:	f000 f822 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd8:	f000 f948 	bl	8000f6c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cdc:	f000 f888 	bl	8000df0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT( &htim1 );
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <main+0x4c>)
 8000ce2:	f001 fcc5 	bl	8002670 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <main+0x4c>)
 8000cea:	f001 fd8b 	bl	8002804 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 8000cee:	2104      	movs	r1, #4
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <main+0x4c>)
 8000cf2:	f001 fd87 	bl	8002804 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <main+0x4c>)
 8000cfa:	f001 fd83 	bl	8002804 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <main+0x4c>)
 8000d02:	f002 fc81 	bl	8003608 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 8000d06:	2104      	movs	r1, #4
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <main+0x4c>)
 8000d0a:	f002 fc7d 	bl	8003608 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 8000d0e:	2108      	movs	r1, #8
 8000d10:	4801      	ldr	r0, [pc, #4]	; (8000d18 <main+0x4c>)
 8000d12:	f002 fc79 	bl	8003608 <HAL_TIMEx_PWMN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <main+0x4a>
 8000d18:	2000004c 	.word	0x2000004c

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b094      	sub	sp, #80	; 0x50
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	2230      	movs	r2, #48	; 0x30
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 feb0 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <SystemClock_Config+0xcc>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a27      	ldr	r2, [pc, #156]	; (8000de8 <SystemClock_Config+0xcc>)
 8000d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <SystemClock_Config+0xcc>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <SystemClock_Config+0xd0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a21      	ldr	r2, [pc, #132]	; (8000dec <SystemClock_Config+0xd0>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <SystemClock_Config+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d90:	23a8      	movs	r3, #168	; 0xa8
 8000d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 f801 	bl	8001da8 <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dac:	f000 fb84 	bl	80014b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db0:	230f      	movs	r3, #15
 8000db2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2302      	movs	r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000dc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2105      	movs	r1, #5
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fa62 	bl	8002298 <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dda:	f000 fb6d 	bl	80014b8 <Error_Handler>
  }
}
 8000dde:	bf00      	nop
 8000de0:	3750      	adds	r7, #80	; 0x50
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40007000 	.word	0x40007000

08000df0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b096      	sub	sp, #88	; 0x58
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2220      	movs	r2, #32
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fe31 	bl	8003a90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e2e:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e30:	4a4d      	ldr	r2, [pc, #308]	; (8000f68 <MX_TIM1_Init+0x178>)
 8000e32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e34:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e3a:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200-1;
 8000e40:	4b48      	ldr	r3, [pc, #288]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e42:	f241 0267 	movw	r2, #4199	; 0x1067
 8000e46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 20-1;
 8000e4e:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e50:	2213      	movs	r2, #19
 8000e52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e54:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5a:	4842      	ldr	r0, [pc, #264]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e5c:	f001 fbb8 	bl	80025d0 <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e66:	f000 fb27 	bl	80014b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e74:	4619      	mov	r1, r3
 8000e76:	483b      	ldr	r0, [pc, #236]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e78:	f001 ffc6 	bl	8002e08 <HAL_TIM_ConfigClockSource>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e82:	f000 fb19 	bl	80014b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e86:	4837      	ldr	r0, [pc, #220]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000e88:	f001 fc62 	bl	8002750 <HAL_TIM_PWM_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e92:	f000 fb11 	bl	80014b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	482f      	ldr	r0, [pc, #188]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000ea6:	f002 fcc7 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000eb0:	f000 fb02 	bl	80014b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb4:	2360      	movs	r3, #96	; 0x60
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 101;
 8000eb8:	2365      	movs	r3, #101	; 0x65
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4822      	ldr	r0, [pc, #136]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000eda:	f001 fed3 	bl	8002c84 <HAL_TIM_PWM_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ee4:	f000 fae8 	bl	80014b8 <Error_Handler>
  }
  sConfigOC.Pulse = 102;
 8000ee8:	2366      	movs	r3, #102	; 0x66
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481b      	ldr	r0, [pc, #108]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000ef6:	f001 fec5 	bl	8002c84 <HAL_TIM_PWM_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000f00:	f000 fada 	bl	80014b8 <Error_Handler>
  }
  sConfigOC.Pulse = 103;
 8000f04:	2367      	movs	r3, #103	; 0x67
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0c:	2208      	movs	r2, #8
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4814      	ldr	r0, [pc, #80]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000f12:	f001 feb7 	bl	8002c84 <HAL_TIM_PWM_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000f1c:	f000 facc 	bl	80014b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 168;
 8000f2c:	23a8      	movs	r3, #168	; 0xa8
 8000f2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000f46:	f002 fcf3 	bl	8003930 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000f50:	f000 fab2 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <MX_TIM1_Init+0x174>)
 8000f56:	f000 fb05 	bl	8001564 <HAL_TIM_MspPostInit>

}
 8000f5a:	bf00      	nop
 8000f5c:	3758      	adds	r7, #88	; 0x58
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000004c 	.word	0x2000004c
 8000f68:	40010000 	.word	0x40010000

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <MX_GPIO_Init+0xc0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a28      	ldr	r2, [pc, #160]	; (800102c <MX_GPIO_Init+0xc0>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_GPIO_Init+0xc0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <MX_GPIO_Init+0xc0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <MX_GPIO_Init+0xc0>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_GPIO_Init+0xc0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_GPIO_Init+0xc0>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a1a      	ldr	r2, [pc, #104]	; (800102c <MX_GPIO_Init+0xc0>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_GPIO_Init+0xc0>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_GPIO_Init+0xc0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <MX_GPIO_Init+0xc0>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_GPIO_Init+0xc0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ff2:	2370      	movs	r3, #112	; 0x70
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <MX_GPIO_Init+0xc4>)
 8001006:	f000 fd1b 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100a:	2310      	movs	r3, #16
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_GPIO_Init+0xc8>)
 800101e:	f000 fd0f 	bl	8001a40 <HAL_GPIO_Init>
}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020800 	.word	0x40020800

08001038 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 1ms interrupt
{
 8001038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	counteronems++; //debug
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001044:	881b      	ldrh	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800104c:	801a      	strh	r2, [r3, #0]
	coast = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 800104e:	2110      	movs	r1, #16
 8001050:	483a      	ldr	r0, [pc, #232]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001052:	f000 fe91 	bl	8001d78 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800105c:	701a      	strb	r2, [r3, #0]
	rampUp= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800105e:	2120      	movs	r1, #32
 8001060:	4836      	ldr	r0, [pc, #216]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001062:	f000 fe89 	bl	8001d78 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800106c:	701a      	strb	r2, [r3, #0]
	//rampDown= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
	//coast=0; //sandesh debug temporarily
	//rampUp=1; //sandesh debug temporarily
	rampDown = 0; //sandesh debug temporarily
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]

	if(	(coast==0) && (coastOld==1) )
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d11b      	bne.n	80010b4 <HAL_TIM_PeriodElapsedCallback+0x7c>
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d117      	bne.n	80010b4 <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		//if the timers were disabled previously because of coast enable them again
		HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8001084:	2100      	movs	r1, #0
 8001086:	4832      	ldr	r0, [pc, #200]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001088:	f001 fbbc 	bl	8002804 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 800108c:	2104      	movs	r1, #4
 800108e:	4830      	ldr	r0, [pc, #192]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001090:	f001 fbb8 	bl	8002804 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 8001094:	2108      	movs	r1, #8
 8001096:	482e      	ldr	r0, [pc, #184]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001098:	f001 fbb4 	bl	8002804 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 800109c:	2100      	movs	r1, #0
 800109e:	482c      	ldr	r0, [pc, #176]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80010a0:	f002 fab2 	bl	8003608 <HAL_TIMEx_PWMN_Start>
		HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 80010a4:	2104      	movs	r1, #4
 80010a6:	482a      	ldr	r0, [pc, #168]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80010a8:	f002 faae 	bl	8003608 <HAL_TIMEx_PWMN_Start>
		HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 80010ac:	2108      	movs	r1, #8
 80010ae:	4828      	ldr	r0, [pc, #160]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80010b0:	f002 faaa 	bl	8003608 <HAL_TIMEx_PWMN_Start>
	}

	coastOld=coast;
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x114>)
 80010ba:	701a      	strb	r2, [r3, #0]
	//uint8_t coast, rampUp, rampDown;
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET)

	if(coast != 1)
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	f000 81a9 	beq.w	8001418 <HAL_TIM_PeriodElapsedCallback+0x3e0>
	{
		if(rampUp==1 && rampDown==0)
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d106      	bne.n	80010dc <HAL_TIM_PeriodElapsedCallback+0xa4>
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <HAL_TIM_PeriodElapsedCallback+0xa4>
			freq=25;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80010d8:	4a1f      	ldr	r2, [pc, #124]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80010da:	601a      	str	r2, [r3, #0]
		if(rampDown==1)
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d103      	bne.n	80010ec <HAL_TIM_PeriodElapsedCallback+0xb4>
			freq=0;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
		if(rampedfreq < freq)
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80010ee:	ed93 7a00 	vldr	s14, [r3]
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d530      	bpl.n	8001164 <HAL_TIM_PeriodElapsedCallback+0x12c>
		{
			rampedfreq = rampedfreq + step;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001160 <HAL_TIM_PeriodElapsedCallback+0x128>
 800110c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001112:	edc3 7a00 	vstr	s15, [r3]
			if(rampedfreq > freq)
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	dd3f      	ble.n	80011ac <HAL_TIM_PeriodElapsedCallback+0x174>
				rampedfreq = freq;
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	e03a      	b.n	80011ac <HAL_TIM_PeriodElapsedCallback+0x174>
 8001136:	bf00      	nop
 8001138:	20000046 	.word	0x20000046
 800113c:	40020000 	.word	0x40020000
 8001140:	20000048 	.word	0x20000048
 8001144:	20000049 	.word	0x20000049
 8001148:	2000004a 	.word	0x2000004a
 800114c:	2000004b 	.word	0x2000004b
 8001150:	2000004c 	.word	0x2000004c
 8001154:	20000038 	.word	0x20000038
 8001158:	41c80000 	.word	0x41c80000
 800115c:	2000003c 	.word	0x2000003c
 8001160:	3ba3d70a 	.word	0x3ba3d70a
		}

		else if(rampedfreq > freq)
 8001164:	4bc6      	ldr	r3, [pc, #792]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	4bc6      	ldr	r3, [pc, #792]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd18      	ble.n	80011ac <HAL_TIM_PeriodElapsedCallback+0x174>
		{
			rampedfreq = rampedfreq - step;
 800117a:	4bc1      	ldr	r3, [pc, #772]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x448>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8001488 <HAL_TIM_PeriodElapsedCallback+0x450>
 8001184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001188:	4bbd      	ldr	r3, [pc, #756]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x448>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
			if(rampedfreq < freq)
 800118e:	4bbc      	ldr	r3, [pc, #752]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001190:	ed93 7a00 	vldr	s14, [r3]
 8001194:	4bbb      	ldr	r3, [pc, #748]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	d503      	bpl.n	80011ac <HAL_TIM_PeriodElapsedCallback+0x174>
				rampedfreq = freq;
 80011a4:	4bb7      	ldr	r3, [pc, #732]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4ab5      	ldr	r2, [pc, #724]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80011aa:	6013      	str	r3, [r2, #0]
		}

		modIndex = rampedfreq/50.00;//depending on freq for V/f control
 80011ac:	4bb4      	ldr	r3, [pc, #720]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80011ae:	ed93 7a00 	vldr	s14, [r3]
 80011b2:	eddf 6ab6 	vldr	s13, [pc, #728]	; 800148c <HAL_TIM_PeriodElapsedCallback+0x454>
 80011b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ba:	4bb5      	ldr	r3, [pc, #724]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x458>)
 80011bc:	edc3 7a00 	vstr	s15, [r3]

		theta_prev = theta;
 80011c0:	4bb4      	ldr	r3, [pc, #720]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4ab4      	ldr	r2, [pc, #720]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80011c6:	6013      	str	r3, [r2, #0]

		omega = (6.2831 * rampedfreq ); //omega = 2*3.142* frequency
 80011c8:	4bad      	ldr	r3, [pc, #692]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fa89 	bl	80006e4 <__aeabi_f2d>
 80011d2:	a3a3      	add	r3, pc, #652	; (adr r3, 8001460 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7fe fff6 	bl	80001c8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fba6 	bl	8000934 <__aeabi_d2f>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4aac      	ldr	r2, [pc, #688]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x464>)
 80011ec:	6013      	str	r3, [r2, #0]

		theta = (omega * 0.001) + theta_prev;
 80011ee:	4bab      	ldr	r3, [pc, #684]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x464>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fa76 	bl	80006e4 <__aeabi_f2d>
 80011f8:	a39b      	add	r3, pc, #620	; (adr r3, 8001468 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7fe ffe3 	bl	80001c8 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4614      	mov	r4, r2
 8001208:	461d      	mov	r5, r3
 800120a:	4ba3      	ldr	r3, [pc, #652]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x460>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fa68 	bl	80006e4 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f904 	bl	8000428 <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fb84 	bl	8000934 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	4a99      	ldr	r2, [pc, #612]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001230:	6013      	str	r3, [r2, #0]

		if(theta >= 6.2831)
 8001232:	4b98      	ldr	r3, [pc, #608]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fa54 	bl	80006e4 <__aeabi_f2d>
 800123c:	a388      	add	r3, pc, #544	; (adr r3, 8001460 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff fb1b 	bl	800087c <__aeabi_dcmpge>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d012      	beq.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x23a>
			theta  = theta - 6.2831;
 800124c:	4b91      	ldr	r3, [pc, #580]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fa47 	bl	80006e4 <__aeabi_f2d>
 8001256:	a382      	add	r3, pc, #520	; (adr r3, 8001460 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f8e2 	bl	8000424 <__aeabi_dsub>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fb64 	bl	8000934 <__aeabi_d2f>
 800126c:	4603      	mov	r3, r0
 800126e:	4a89      	ldr	r2, [pc, #548]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8001270:	6013      	str	r3, [r2, #0]

		compvalue1= (uint16_t) ((2100*modIndex)+(2100*modIndex*sin(theta)));		//4199 = max comp value
 8001272:	4b87      	ldr	r3, [pc, #540]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80014a0 <HAL_TIM_PeriodElapsedCallback+0x468>
 800127c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001280:	ee17 0a90 	vmov	r0, s15
 8001284:	f7ff fa2e 	bl	80006e4 <__aeabi_f2d>
 8001288:	4604      	mov	r4, r0
 800128a:	460d      	mov	r5, r1
 800128c:	4b80      	ldr	r3, [pc, #512]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x458>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80014a0 <HAL_TIM_PeriodElapsedCallback+0x468>
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129a:	ee17 0a90 	vmov	r0, s15
 800129e:	f7ff fa21 	bl	80006e4 <__aeabi_f2d>
 80012a2:	4680      	mov	r8, r0
 80012a4:	4689      	mov	r9, r1
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa1a 	bl	80006e4 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b10 	vmov	d0, r2, r3
 80012b8:	f002 fbf2 	bl	8003aa0 <sin>
 80012bc:	ec53 2b10 	vmov	r2, r3, d0
 80012c0:	4640      	mov	r0, r8
 80012c2:	4649      	mov	r1, r9
 80012c4:	f7fe ff80 	bl	80001c8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff f8aa 	bl	8000428 <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fb0a 	bl	80008f4 <__aeabi_d2uiz>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b6f      	ldr	r3, [pc, #444]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80012e6:	801a      	strh	r2, [r3, #0]
		compvalue2= (uint16_t) ((2100*modIndex)+(2100*modIndex*sin(theta + 2.0944)));
 80012e8:	4b69      	ldr	r3, [pc, #420]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x458>)
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80014a0 <HAL_TIM_PeriodElapsedCallback+0x468>
 80012f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f6:	ee17 0a90 	vmov	r0, s15
 80012fa:	f7ff f9f3 	bl	80006e4 <__aeabi_f2d>
 80012fe:	4604      	mov	r4, r0
 8001300:	460d      	mov	r5, r1
 8001302:	4b63      	ldr	r3, [pc, #396]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80014a0 <HAL_TIM_PeriodElapsedCallback+0x468>
 800130c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001310:	ee17 0a90 	vmov	r0, s15
 8001314:	f7ff f9e6 	bl	80006e4 <__aeabi_f2d>
 8001318:	4680      	mov	r8, r0
 800131a:	4689      	mov	r9, r1
 800131c:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f9df 	bl	80006e4 <__aeabi_f2d>
 8001326:	a352      	add	r3, pc, #328	; (adr r3, 8001470 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff f87c 	bl	8000428 <__adddf3>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	ec43 2b17 	vmov	d7, r2, r3
 8001338:	eeb0 0a47 	vmov.f32	s0, s14
 800133c:	eef0 0a67 	vmov.f32	s1, s15
 8001340:	f002 fbae 	bl	8003aa0 <sin>
 8001344:	ec53 2b10 	vmov	r2, r3, d0
 8001348:	4640      	mov	r0, r8
 800134a:	4649      	mov	r1, r9
 800134c:	f7fe ff3c 	bl	80001c8 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4620      	mov	r0, r4
 8001356:	4629      	mov	r1, r5
 8001358:	f7ff f866 	bl	8000428 <__adddf3>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fac6 	bl	80008f4 <__aeabi_d2uiz>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800136e:	801a      	strh	r2, [r3, #0]
		compvalue3= (uint16_t) ((2100*modIndex)+(2100*modIndex*sin(theta + 4.1888)));
 8001370:	4b47      	ldr	r3, [pc, #284]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80014a0 <HAL_TIM_PeriodElapsedCallback+0x468>
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	ee17 0a90 	vmov	r0, s15
 8001382:	f7ff f9af 	bl	80006e4 <__aeabi_f2d>
 8001386:	4604      	mov	r4, r0
 8001388:	460d      	mov	r5, r1
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x458>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80014a0 <HAL_TIM_PeriodElapsedCallback+0x468>
 8001394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001398:	ee17 0a90 	vmov	r0, s15
 800139c:	f7ff f9a2 	bl	80006e4 <__aeabi_f2d>
 80013a0:	4680      	mov	r8, r0
 80013a2:	4689      	mov	r9, r1
 80013a4:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f99b 	bl	80006e4 <__aeabi_f2d>
 80013ae:	a332      	add	r3, pc, #200	; (adr r3, 8001478 <HAL_TIM_PeriodElapsedCallback+0x440>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff f838 	bl	8000428 <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	ec43 2b17 	vmov	d7, r2, r3
 80013c0:	eeb0 0a47 	vmov.f32	s0, s14
 80013c4:	eef0 0a67 	vmov.f32	s1, s15
 80013c8:	f002 fb6a 	bl	8003aa0 <sin>
 80013cc:	ec53 2b10 	vmov	r2, r3, d0
 80013d0:	4640      	mov	r0, r8
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7fe fef8 	bl	80001c8 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4620      	mov	r0, r4
 80013de:	4629      	mov	r1, r5
 80013e0:	f7ff f822 	bl	8000428 <__adddf3>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fa82 	bl	80008f4 <__aeabi_d2uiz>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x474>)
 80013f6:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compvalue1);
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80013fa:	881a      	ldrh	r2, [r3, #0]
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, compvalue2);
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001404:	881a      	ldrh	r2, [r3, #0]
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, compvalue3);
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x474>)
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1 );
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2 );
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3 );
	}

}
 8001416:	e01b      	b.n	8001450 <HAL_TIM_PeriodElapsedCallback+0x418>
	else if(coast == 1)
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d117      	bne.n	8001450 <HAL_TIM_PeriodElapsedCallback+0x418>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1 );
 8001420:	2100      	movs	r1, #0
 8001422:	4823      	ldr	r0, [pc, #140]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001424:	f001 fab6 	bl	8002994 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2 );
 8001428:	2104      	movs	r1, #4
 800142a:	4821      	ldr	r0, [pc, #132]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800142c:	f001 fab2 	bl	8002994 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3 );
 8001430:	2108      	movs	r1, #8
 8001432:	481f      	ldr	r0, [pc, #124]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001434:	f001 faae 	bl	8002994 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1 );
 8001438:	2100      	movs	r1, #0
 800143a:	481d      	ldr	r0, [pc, #116]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800143c:	f002 f99e 	bl	800377c <HAL_TIMEx_PWMN_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2 );
 8001440:	2104      	movs	r1, #4
 8001442:	481b      	ldr	r0, [pc, #108]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001444:	f002 f99a 	bl	800377c <HAL_TIMEx_PWMN_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3 );
 8001448:	2108      	movs	r1, #8
 800144a:	4819      	ldr	r0, [pc, #100]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800144c:	f002 f996 	bl	800377c <HAL_TIMEx_PWMN_Stop>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	f765fd8b 	.word	0xf765fd8b
 8001464:	401921e4 	.word	0x401921e4
 8001468:	d2f1a9fc 	.word	0xd2f1a9fc
 800146c:	3f50624d 	.word	0x3f50624d
 8001470:	c985f06f 	.word	0xc985f06f
 8001474:	4000c154 	.word	0x4000c154
 8001478:	c985f06f 	.word	0xc985f06f
 800147c:	4010c154 	.word	0x4010c154
 8001480:	2000003c 	.word	0x2000003c
 8001484:	20000038 	.word	0x20000038
 8001488:	3ba3d70a 	.word	0x3ba3d70a
 800148c:	42480000 	.word	0x42480000
 8001490:	20000034 	.word	0x20000034
 8001494:	20000028 	.word	0x20000028
 8001498:	2000002c 	.word	0x2000002c
 800149c:	20000030 	.word	0x20000030
 80014a0:	45034000 	.word	0x45034000
 80014a4:	20000040 	.word	0x20000040
 80014a8:	20000042 	.word	0x20000042
 80014ac:	20000044 	.word	0x20000044
 80014b0:	2000004c 	.word	0x2000004c
 80014b4:	20000048 	.word	0x20000048

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>
	...

080014c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_MspInit+0x4c>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x4c>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_TIM_Base_MspInit+0x48>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d115      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_TIM_Base_MspInit+0x4c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <HAL_TIM_Base_MspInit+0x4c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_TIM_Base_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2019      	movs	r0, #25
 8001548:	f000 fa43 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800154c:	2019      	movs	r0, #25
 800154e:	f000 fa5c 	bl	8001a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40010000 	.word	0x40010000
 8001560:	40023800 	.word	0x40023800

08001564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a30      	ldr	r2, [pc, #192]	; (8001644 <HAL_TIM_MspPostInit+0xe0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d15a      	bne.n	800163c <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_TIM_MspPostInit+0xe4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a2e      	ldr	r2, [pc, #184]	; (8001648 <HAL_TIM_MspPostInit+0xe4>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_TIM_MspPostInit+0xe4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b28      	ldr	r3, [pc, #160]	; (8001648 <HAL_TIM_MspPostInit+0xe4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a27      	ldr	r2, [pc, #156]	; (8001648 <HAL_TIM_MspPostInit+0xe4>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_TIM_MspPostInit+0xe4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_TIM_MspPostInit+0xe4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a20      	ldr	r2, [pc, #128]	; (8001648 <HAL_TIM_MspPostInit+0xe4>)
 80015c8:	f043 0310 	orr.w	r3, r3, #16
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_TIM_MspPostInit+0xe4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM1_CH3N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	4815      	ldr	r0, [pc, #84]	; (800164c <HAL_TIM_MspPostInit+0xe8>)
 80015f6:	f000 fa23 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015fa:	2303      	movs	r3, #3
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800160a:	2301      	movs	r3, #1
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	480e      	ldr	r0, [pc, #56]	; (8001650 <HAL_TIM_MspPostInit+0xec>)
 8001616:	f000 fa13 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800161a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800162c:	2301      	movs	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <HAL_TIM_MspPostInit+0xf0>)
 8001638:	f000 fa02 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010000 	.word	0x40010000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40021000 	.word	0x40021000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f89a 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016b2:	f001 f9df 	bl	8002a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000004c 	.word	0x2000004c

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001700:	4c0b      	ldr	r4, [pc, #44]	; (8001730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800170e:	f7ff ffd7 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f002 f999 	bl	8003a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff fad9 	bl	8000ccc <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001728:	08004d20 	.word	0x08004d20
  ldr r2, =_sbss
 800172c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001730:	20000098 	.word	0x20000098

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <HAL_Init+0x40>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_Init+0x40>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_Init+0x40>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f92b 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	200f      	movs	r0, #15
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff feaa 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f943 	bl	8001a26 <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f90b 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008
 8001800:	20000094 	.word	0x20000094

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000094 	.word	0x20000094

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff29 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff3e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff31 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa2 	bl	8001978 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e16b      	b.n	8001d34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 815a 	bne.w	8001d2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d005      	beq.n	8001a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d130      	bne.n	8001af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d017      	beq.n	8001b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d123      	bne.n	8001b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	08da      	lsrs	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3208      	adds	r2, #8
 8001b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	08da      	lsrs	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3208      	adds	r2, #8
 8001b7e:	69b9      	ldr	r1, [r7, #24]
 8001b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0203 	and.w	r2, r3, #3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80b4 	beq.w	8001d2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b60      	ldr	r3, [pc, #384]	; (8001d4c <HAL_GPIO_Init+0x30c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a5f      	ldr	r2, [pc, #380]	; (8001d4c <HAL_GPIO_Init+0x30c>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_GPIO_Init+0x30c>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be2:	4a5b      	ldr	r2, [pc, #364]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <HAL_GPIO_Init+0x314>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02b      	beq.n	8001c66 <HAL_GPIO_Init+0x226>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_GPIO_Init+0x318>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x222>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a50      	ldr	r2, [pc, #320]	; (8001d5c <HAL_GPIO_Init+0x31c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x21e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4f      	ldr	r2, [pc, #316]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x21a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4e      	ldr	r2, [pc, #312]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x216>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4d      	ldr	r2, [pc, #308]	; (8001d68 <HAL_GPIO_Init+0x328>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x212>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4c      	ldr	r2, [pc, #304]	; (8001d6c <HAL_GPIO_Init+0x32c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x20e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4b      	ldr	r2, [pc, #300]	; (8001d70 <HAL_GPIO_Init+0x330>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x20a>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00e      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c4a:	2308      	movs	r3, #8
 8001c4c:	e00c      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c4e:	2306      	movs	r3, #6
 8001c50:	e00a      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c52:	2305      	movs	r3, #5
 8001c54:	e008      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c56:	2304      	movs	r3, #4
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e004      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x228>
 8001c66:	2300      	movs	r3, #0
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	f002 0203 	and.w	r2, r2, #3
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	4093      	lsls	r3, r2
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c78:	4935      	ldr	r1, [pc, #212]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001caa:	4a32      	ldr	r2, [pc, #200]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cb0:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3301      	adds	r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	f67f ae90 	bls.w	8001a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3724      	adds	r7, #36	; 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40013800 	.word	0x40013800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40021400 	.word	0x40021400
 8001d6c:	40021800 	.word	0x40021800
 8001d70:	40021c00 	.word	0x40021c00
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	e001      	b.n	8001d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e264      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d075      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc6:	4ba3      	ldr	r3, [pc, #652]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d00c      	beq.n	8001dec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4ba0      	ldr	r3, [pc, #640]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d112      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dde:	4b9d      	ldr	r3, [pc, #628]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dea:	d10b      	bne.n	8001e04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	4b99      	ldr	r3, [pc, #612]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d05b      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x108>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d157      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e23f      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d106      	bne.n	8001e1c <HAL_RCC_OscConfig+0x74>
 8001e0e:	4b91      	ldr	r3, [pc, #580]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a90      	ldr	r2, [pc, #576]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e01d      	b.n	8001e58 <HAL_RCC_OscConfig+0xb0>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x98>
 8001e26:	4b8b      	ldr	r3, [pc, #556]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a8a      	ldr	r2, [pc, #552]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a87      	ldr	r2, [pc, #540]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0xb0>
 8001e40:	4b84      	ldr	r3, [pc, #528]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a83      	ldr	r2, [pc, #524]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a80      	ldr	r2, [pc, #512]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d013      	beq.n	8001e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fcd0 	bl	8001804 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff fccc 	bl	8001804 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e204      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0xc0>
 8001e86:	e014      	b.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff fcbc 	bl	8001804 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff fcb8 	bl	8001804 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1f0      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0xe8>
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d063      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ebe:	4b65      	ldr	r3, [pc, #404]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d11c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d116      	bne.n	8001f10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_RCC_OscConfig+0x152>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e1c4      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efa:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4952      	ldr	r1, [pc, #328]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	e03a      	b.n	8001f86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f18:	4b4f      	ldr	r3, [pc, #316]	; (8002058 <HAL_RCC_OscConfig+0x2b0>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fc71 	bl	8001804 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff fc6d 	bl	8001804 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1a5      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4940      	ldr	r1, [pc, #256]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
 8001f58:	e015      	b.n	8001f86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5a:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_RCC_OscConfig+0x2b0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff fc50 	bl	8001804 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f68:	f7ff fc4c 	bl	8001804 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e184      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d030      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d016      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	4b30      	ldr	r3, [pc, #192]	; (800205c <HAL_RCC_OscConfig+0x2b4>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7ff fc30 	bl	8001804 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7ff fc2c 	bl	8001804 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e164      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x200>
 8001fc6:	e015      	b.n	8001ff4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_OscConfig+0x2b4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7ff fc19 	bl	8001804 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd6:	f7ff fc15 	bl	8001804 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e14d      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a0 	beq.w	8002142 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a0e      	ldr	r2, [pc, #56]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x2b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d121      	bne.n	8002082 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_RCC_OscConfig+0x2b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_RCC_OscConfig+0x2b8>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7ff fbdb 	bl	8001804 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e011      	b.n	8002076 <HAL_RCC_OscConfig+0x2ce>
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	42470000 	.word	0x42470000
 800205c:	42470e80 	.word	0x42470e80
 8002060:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7ff fbce 	bl	8001804 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e106      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_RCC_OscConfig+0x4e4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d106      	bne.n	8002098 <HAL_RCC_OscConfig+0x2f0>
 800208a:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a80      	ldr	r2, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
 8002096:	e01c      	b.n	80020d2 <HAL_RCC_OscConfig+0x32a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x312>
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a7a      	ldr	r2, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	4b78      	ldr	r3, [pc, #480]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a77      	ldr	r2, [pc, #476]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x32a>
 80020ba:	4b75      	ldr	r3, [pc, #468]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a74      	ldr	r2, [pc, #464]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	4b72      	ldr	r3, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ca:	4a71      	ldr	r2, [pc, #452]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d015      	beq.n	8002106 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7ff fb93 	bl	8001804 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7ff fb8f 	bl	8001804 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0c5      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	4b65      	ldr	r3, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ee      	beq.n	80020e2 <HAL_RCC_OscConfig+0x33a>
 8002104:	e014      	b.n	8002130 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7ff fb7d 	bl	8001804 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff fb79 	bl	8001804 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0af      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ee      	bne.n	800210e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b56      	ldr	r3, [pc, #344]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a55      	ldr	r2, [pc, #340]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 809b 	beq.w	8002282 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800214c:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d05c      	beq.n	8002212 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d141      	bne.n	80021e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_RCC_OscConfig+0x4ec>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fb4d 	bl	8001804 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fb49 	bl	8001804 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e081      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002180:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	019b      	lsls	r3, r3, #6
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	3b01      	subs	r3, #1
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	061b      	lsls	r3, r3, #24
 80021b0:	4937      	ldr	r1, [pc, #220]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_RCC_OscConfig+0x4ec>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fb22 	bl	8001804 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff fb1e 	bl	8001804 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e056      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x41c>
 80021e2:	e04e      	b.n	8002282 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e4:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <HAL_RCC_OscConfig+0x4ec>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff fb0b 	bl	8001804 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff fb07 	bl	8001804 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e03f      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x44a>
 8002210:	e037      	b.n	8002282 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e032      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_RCC_OscConfig+0x4e8>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d028      	beq.n	800227e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d121      	bne.n	800227e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d11a      	bne.n	800227e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800224e:	4013      	ands	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002254:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002256:	4293      	cmp	r3, r2
 8002258:	d111      	bne.n	800227e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	3b01      	subs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d107      	bne.n	800227e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40007000 	.word	0x40007000
 8002290:	40023800 	.word	0x40023800
 8002294:	42470060 	.word	0x42470060

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0cc      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b68      	ldr	r3, [pc, #416]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d90c      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b65      	ldr	r3, [pc, #404]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b8      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4a52      	ldr	r2, [pc, #328]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800230e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b50      	ldr	r3, [pc, #320]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	494d      	ldr	r1, [pc, #308]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d044      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d119      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d003      	beq.n	8002356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002352:	2b03      	cmp	r3, #3
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b3f      	ldr	r3, [pc, #252]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e06f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e067      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002376:	4b37      	ldr	r3, [pc, #220]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f023 0203 	bic.w	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4934      	ldr	r1, [pc, #208]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	4313      	orrs	r3, r2
 8002386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002388:	f7ff fa3c 	bl	8001804 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7ff fa38 	bl	8001804 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e04f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 020c 	and.w	r2, r3, #12
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1eb      	bne.n	8002390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b25      	ldr	r3, [pc, #148]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d20c      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e032      	b.n	8002446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4916      	ldr	r1, [pc, #88]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800241e:	f000 f821 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490a      	ldr	r1, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f99c 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023c00 	.word	0x40023c00
 8002454:	40023800 	.word	0x40023800
 8002458:	08004b28 	.word	0x08004b28
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b5b0      	push	{r4, r5, r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800246a:	2100      	movs	r1, #0
 800246c:	6079      	str	r1, [r7, #4]
 800246e:	2100      	movs	r1, #0
 8002470:	60f9      	str	r1, [r7, #12]
 8002472:	2100      	movs	r1, #0
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002476:	2100      	movs	r1, #0
 8002478:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800247a:	4952      	ldr	r1, [pc, #328]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800247c:	6889      	ldr	r1, [r1, #8]
 800247e:	f001 010c 	and.w	r1, r1, #12
 8002482:	2908      	cmp	r1, #8
 8002484:	d00d      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002486:	2908      	cmp	r1, #8
 8002488:	f200 8094 	bhi.w	80025b4 <HAL_RCC_GetSysClockFreq+0x150>
 800248c:	2900      	cmp	r1, #0
 800248e:	d002      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x32>
 8002490:	2904      	cmp	r1, #4
 8002492:	d003      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x38>
 8002494:	e08e      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002496:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002498:	60bb      	str	r3, [r7, #8]
       break;
 800249a:	e08e      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800249c:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_RCC_GetSysClockFreq+0x168>)
 800249e:	60bb      	str	r3, [r7, #8]
      break;
 80024a0:	e08b      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a2:	4948      	ldr	r1, [pc, #288]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80024a4:	6849      	ldr	r1, [r1, #4]
 80024a6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80024aa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ac:	4945      	ldr	r1, [pc, #276]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80024ae:	6849      	ldr	r1, [r1, #4]
 80024b0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80024b4:	2900      	cmp	r1, #0
 80024b6:	d024      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b8:	4942      	ldr	r1, [pc, #264]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80024ba:	6849      	ldr	r1, [r1, #4]
 80024bc:	0989      	lsrs	r1, r1, #6
 80024be:	4608      	mov	r0, r1
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80024c8:	f04f 0500 	mov.w	r5, #0
 80024cc:	ea00 0204 	and.w	r2, r0, r4
 80024d0:	ea01 0305 	and.w	r3, r1, r5
 80024d4:	493d      	ldr	r1, [pc, #244]	; (80025cc <HAL_RCC_GetSysClockFreq+0x168>)
 80024d6:	fb01 f003 	mul.w	r0, r1, r3
 80024da:	2100      	movs	r1, #0
 80024dc:	fb01 f102 	mul.w	r1, r1, r2
 80024e0:	1844      	adds	r4, r0, r1
 80024e2:	493a      	ldr	r1, [pc, #232]	; (80025cc <HAL_RCC_GetSysClockFreq+0x168>)
 80024e4:	fba2 0101 	umull	r0, r1, r2, r1
 80024e8:	1863      	adds	r3, r4, r1
 80024ea:	4619      	mov	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	f7fe fa6e 	bl	80009d4 <__aeabi_uldivmod>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4613      	mov	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e04a      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	099b      	lsrs	r3, r3, #6
 8002508:	461a      	mov	r2, r3
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002512:	f04f 0100 	mov.w	r1, #0
 8002516:	ea02 0400 	and.w	r4, r2, r0
 800251a:	ea03 0501 	and.w	r5, r3, r1
 800251e:	4620      	mov	r0, r4
 8002520:	4629      	mov	r1, r5
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	014b      	lsls	r3, r1, #5
 800252c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002530:	0142      	lsls	r2, r0, #5
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	1b00      	subs	r0, r0, r4
 8002538:	eb61 0105 	sbc.w	r1, r1, r5
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	018b      	lsls	r3, r1, #6
 8002546:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800254a:	0182      	lsls	r2, r0, #6
 800254c:	1a12      	subs	r2, r2, r0
 800254e:	eb63 0301 	sbc.w	r3, r3, r1
 8002552:	f04f 0000 	mov.w	r0, #0
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	00d9      	lsls	r1, r3, #3
 800255c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002560:	00d0      	lsls	r0, r2, #3
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	1912      	adds	r2, r2, r4
 8002568:	eb45 0303 	adc.w	r3, r5, r3
 800256c:	f04f 0000 	mov.w	r0, #0
 8002570:	f04f 0100 	mov.w	r1, #0
 8002574:	0299      	lsls	r1, r3, #10
 8002576:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800257a:	0290      	lsls	r0, r2, #10
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	f7fe fa22 	bl	80009d4 <__aeabi_uldivmod>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4613      	mov	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	3301      	adds	r3, #1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	60bb      	str	r3, [r7, #8]
      break;
 80025b2:	e002      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x164>)
 80025b6:	60bb      	str	r3, [r7, #8]
      break;
 80025b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ba:	68bb      	ldr	r3, [r7, #8]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bdb0      	pop	{r4, r5, r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	00f42400 	.word	0x00f42400
 80025cc:	017d7840 	.word	0x017d7840

080025d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e041      	b.n	8002666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe ff8c 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3304      	adds	r3, #4
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f000 fcea 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d001      	beq.n	8002688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e04e      	b.n	8002726 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a23      	ldr	r2, [pc, #140]	; (8002734 <HAL_TIM_Base_Start_IT+0xc4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d022      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x80>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b2:	d01d      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x80>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1f      	ldr	r2, [pc, #124]	; (8002738 <HAL_TIM_Base_Start_IT+0xc8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d018      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x80>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_TIM_Base_Start_IT+0xcc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x80>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_TIM_Base_Start_IT+0xd0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00e      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x80>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_TIM_Base_Start_IT+0xd4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x80>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_TIM_Base_Start_IT+0xd8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x80>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_TIM_Base_Start_IT+0xdc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d111      	bne.n	8002714 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d010      	beq.n	8002724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0201 	orr.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002712:	e007      	b.n	8002724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40010000 	.word	0x40010000
 8002738:	40000400 	.word	0x40000400
 800273c:	40000800 	.word	0x40000800
 8002740:	40000c00 	.word	0x40000c00
 8002744:	40010400 	.word	0x40010400
 8002748:	40014000 	.word	0x40014000
 800274c:	40001800 	.word	0x40001800

08002750 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e041      	b.n	80027e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f839 	bl	80027ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 fc2a 	bl	8002fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_TIM_PWM_Start+0x24>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e022      	b.n	800286e <HAL_TIM_PWM_Start+0x6a>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b04      	cmp	r3, #4
 800282c:	d109      	bne.n	8002842 <HAL_TIM_PWM_Start+0x3e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	bf14      	ite	ne
 800283a:	2301      	movne	r3, #1
 800283c:	2300      	moveq	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	e015      	b.n	800286e <HAL_TIM_PWM_Start+0x6a>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d109      	bne.n	800285c <HAL_TIM_PWM_Start+0x58>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e008      	b.n	800286e <HAL_TIM_PWM_Start+0x6a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07c      	b.n	8002970 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <HAL_TIM_PWM_Start+0x82>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	e013      	b.n	80028ae <HAL_TIM_PWM_Start+0xaa>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d104      	bne.n	8002896 <HAL_TIM_PWM_Start+0x92>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002894:	e00b      	b.n	80028ae <HAL_TIM_PWM_Start+0xaa>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_PWM_Start+0xa2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a4:	e003      	b.n	80028ae <HAL_TIM_PWM_Start+0xaa>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fe80 	bl	80035bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <HAL_TIM_PWM_Start+0x174>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d004      	beq.n	80028d0 <HAL_TIM_PWM_Start+0xcc>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2c      	ldr	r2, [pc, #176]	; (800297c <HAL_TIM_PWM_Start+0x178>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_TIM_PWM_Start+0xd0>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_TIM_PWM_Start+0xd2>
 80028d4:	2300      	movs	r3, #0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_TIM_PWM_Start+0x174>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_TIM_PWM_Start+0x136>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d01d      	beq.n	800293a <HAL_TIM_PWM_Start+0x136>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_TIM_PWM_Start+0x17c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_TIM_PWM_Start+0x136>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_TIM_PWM_Start+0x180>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_TIM_PWM_Start+0x136>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_TIM_PWM_Start+0x184>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_TIM_PWM_Start+0x136>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a16      	ldr	r2, [pc, #88]	; (800297c <HAL_TIM_PWM_Start+0x178>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_TIM_PWM_Start+0x136>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_TIM_PWM_Start+0x188>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_TIM_PWM_Start+0x136>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a16      	ldr	r2, [pc, #88]	; (8002990 <HAL_TIM_PWM_Start+0x18c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d111      	bne.n	800295e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b06      	cmp	r3, #6
 800294a:	d010      	beq.n	800296e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	e007      	b.n	800296e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40010000 	.word	0x40010000
 800297c:	40010400 	.word	0x40010400
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40000c00 	.word	0x40000c00
 800298c:	40014000 	.word	0x40014000
 8002990:	40001800 	.word	0x40001800

08002994 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fe08 	bl	80035bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2e      	ldr	r2, [pc, #184]	; (8002a6c <HAL_TIM_PWM_Stop+0xd8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_TIM_PWM_Stop+0x2c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2d      	ldr	r2, [pc, #180]	; (8002a70 <HAL_TIM_PWM_Stop+0xdc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_PWM_Stop+0x30>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_TIM_PWM_Stop+0x32>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d017      	beq.n	80029fa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a1a      	ldr	r2, [r3, #32]
 80029d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <HAL_TIM_PWM_Stop+0x66>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a1a      	ldr	r2, [r3, #32]
 80029e0:	f240 4344 	movw	r3, #1092	; 0x444
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d107      	bne.n	80029fa <HAL_TIM_PWM_Stop+0x66>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <HAL_TIM_PWM_Stop+0x96>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	f240 4344 	movw	r3, #1092	; 0x444
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <HAL_TIM_PWM_Stop+0x96>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d104      	bne.n	8002a3a <HAL_TIM_PWM_Stop+0xa6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a38:	e013      	b.n	8002a62 <HAL_TIM_PWM_Stop+0xce>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d104      	bne.n	8002a4a <HAL_TIM_PWM_Stop+0xb6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a48:	e00b      	b.n	8002a62 <HAL_TIM_PWM_Stop+0xce>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d104      	bne.n	8002a5a <HAL_TIM_PWM_Stop+0xc6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a58:	e003      	b.n	8002a62 <HAL_TIM_PWM_Stop+0xce>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d122      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d11b      	bne.n	8002ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0202 	mvn.w	r2, #2
 8002aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa77 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa69 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fa7a 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d122      	bne.n	8002b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d11b      	bne.n	8002b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0204 	mvn.w	r2, #4
 8002af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2202      	movs	r2, #2
 8002afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa4d 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fa3f 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fa50 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d122      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d11b      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0208 	mvn.w	r2, #8
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa23 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002b64:	e005      	b.n	8002b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fa15 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fa26 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d122      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d11b      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0210 	mvn.w	r2, #16
 8002b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2208      	movs	r2, #8
 8002ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f9f9 	bl	8002faa <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e005      	b.n	8002bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9eb 	bl	8002f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f9fc 	bl	8002fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0201 	mvn.w	r2, #1
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fa20 	bl	8001038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d10e      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d107      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fee2 	bl	80039e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f9c1 	bl	8002fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d10e      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d107      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0220 	mvn.w	r2, #32
 8002c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 feac 	bl	80039d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e0ae      	b.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	f200 809f 	bhi.w	8002df0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cb2:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb8:	08002ced 	.word	0x08002ced
 8002cbc:	08002df1 	.word	0x08002df1
 8002cc0:	08002df1 	.word	0x08002df1
 8002cc4:	08002df1 	.word	0x08002df1
 8002cc8:	08002d2d 	.word	0x08002d2d
 8002ccc:	08002df1 	.word	0x08002df1
 8002cd0:	08002df1 	.word	0x08002df1
 8002cd4:	08002df1 	.word	0x08002df1
 8002cd8:	08002d6f 	.word	0x08002d6f
 8002cdc:	08002df1 	.word	0x08002df1
 8002ce0:	08002df1 	.word	0x08002df1
 8002ce4:	08002df1 	.word	0x08002df1
 8002ce8:	08002daf 	.word	0x08002daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fa18 	bl	8003128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0208 	orr.w	r2, r2, #8
 8002d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	619a      	str	r2, [r3, #24]
      break;
 8002d2a:	e064      	b.n	8002df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fa68 	bl	8003208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6999      	ldr	r1, [r3, #24]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	021a      	lsls	r2, r3, #8
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	619a      	str	r2, [r3, #24]
      break;
 8002d6c:	e043      	b.n	8002df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fabd 	bl	80032f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0208 	orr.w	r2, r2, #8
 8002d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0204 	bic.w	r2, r2, #4
 8002d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69d9      	ldr	r1, [r3, #28]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	61da      	str	r2, [r3, #28]
      break;
 8002dac:	e023      	b.n	8002df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fb11 	bl	80033dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69d9      	ldr	r1, [r3, #28]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	021a      	lsls	r2, r3, #8
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	61da      	str	r2, [r3, #28]
      break;
 8002dee:	e002      	b.n	8002df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	75fb      	strb	r3, [r7, #23]
      break;
 8002df4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_ConfigClockSource+0x1c>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e0b4      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x186>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5c:	d03e      	beq.n	8002edc <HAL_TIM_ConfigClockSource+0xd4>
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e62:	f200 8087 	bhi.w	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6a:	f000 8086 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x172>
 8002e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e72:	d87f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e74:	2b70      	cmp	r3, #112	; 0x70
 8002e76:	d01a      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0xa6>
 8002e78:	2b70      	cmp	r3, #112	; 0x70
 8002e7a:	d87b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e7c:	2b60      	cmp	r3, #96	; 0x60
 8002e7e:	d050      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x11a>
 8002e80:	2b60      	cmp	r3, #96	; 0x60
 8002e82:	d877      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b50      	cmp	r3, #80	; 0x50
 8002e86:	d03c      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0xfa>
 8002e88:	2b50      	cmp	r3, #80	; 0x50
 8002e8a:	d873      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b40      	cmp	r3, #64	; 0x40
 8002e8e:	d058      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0x13a>
 8002e90:	2b40      	cmp	r3, #64	; 0x40
 8002e92:	d86f      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e94:	2b30      	cmp	r3, #48	; 0x30
 8002e96:	d064      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002e98:	2b30      	cmp	r3, #48	; 0x30
 8002e9a:	d86b      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d060      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d867      	bhi.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05c      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d05a      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x15a>
 8002eac:	e062      	b.n	8002f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f000 fb5d 	bl	800357c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
      break;
 8002eda:	e04f      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6899      	ldr	r1, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f000 fb46 	bl	800357c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002efe:	609a      	str	r2, [r3, #8]
      break;
 8002f00:	e03c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f000 faba 	bl	8003488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2150      	movs	r1, #80	; 0x50
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fb13 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8002f20:	e02c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f000 fad9 	bl	80034e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2160      	movs	r1, #96	; 0x60
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fb03 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8002f40:	e01c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f000 fa9a 	bl	8003488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2140      	movs	r1, #64	; 0x40
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 faf3 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8002f60:	e00c      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f000 faea 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8002f72:	e003      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	e000      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a40      	ldr	r2, [pc, #256]	; (80030fc <TIM_Base_SetConfig+0x114>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003006:	d00f      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3d      	ldr	r2, [pc, #244]	; (8003100 <TIM_Base_SetConfig+0x118>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00b      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a3c      	ldr	r2, [pc, #240]	; (8003104 <TIM_Base_SetConfig+0x11c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a3b      	ldr	r2, [pc, #236]	; (8003108 <TIM_Base_SetConfig+0x120>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d003      	beq.n	8003028 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a3a      	ldr	r2, [pc, #232]	; (800310c <TIM_Base_SetConfig+0x124>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d108      	bne.n	800303a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <TIM_Base_SetConfig+0x114>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02b      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003048:	d027      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <TIM_Base_SetConfig+0x118>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d023      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <TIM_Base_SetConfig+0x11c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01f      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <TIM_Base_SetConfig+0x120>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01b      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a29      	ldr	r2, [pc, #164]	; (800310c <TIM_Base_SetConfig+0x124>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d017      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a28      	ldr	r2, [pc, #160]	; (8003110 <TIM_Base_SetConfig+0x128>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a27      	ldr	r2, [pc, #156]	; (8003114 <TIM_Base_SetConfig+0x12c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00f      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a26      	ldr	r2, [pc, #152]	; (8003118 <TIM_Base_SetConfig+0x130>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00b      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a25      	ldr	r2, [pc, #148]	; (800311c <TIM_Base_SetConfig+0x134>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a24      	ldr	r2, [pc, #144]	; (8003120 <TIM_Base_SetConfig+0x138>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a23      	ldr	r2, [pc, #140]	; (8003124 <TIM_Base_SetConfig+0x13c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d108      	bne.n	80030ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <TIM_Base_SetConfig+0x114>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d003      	beq.n	80030e0 <TIM_Base_SetConfig+0xf8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a0c      	ldr	r2, [pc, #48]	; (800310c <TIM_Base_SetConfig+0x124>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d103      	bne.n	80030e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	615a      	str	r2, [r3, #20]
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800
 8003108:	40000c00 	.word	0x40000c00
 800310c:	40010400 	.word	0x40010400
 8003110:	40014000 	.word	0x40014000
 8003114:	40014400 	.word	0x40014400
 8003118:	40014800 	.word	0x40014800
 800311c:	40001800 	.word	0x40001800
 8003120:	40001c00 	.word	0x40001c00
 8003124:	40002000 	.word	0x40002000

08003128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f023 0201 	bic.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f023 0302 	bic.w	r3, r3, #2
 8003170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a20      	ldr	r2, [pc, #128]	; (8003200 <TIM_OC1_SetConfig+0xd8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_OC1_SetConfig+0x64>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <TIM_OC1_SetConfig+0xdc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d10c      	bne.n	80031a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0308 	bic.w	r3, r3, #8
 8003192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f023 0304 	bic.w	r3, r3, #4
 80031a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a15      	ldr	r2, [pc, #84]	; (8003200 <TIM_OC1_SetConfig+0xd8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_OC1_SetConfig+0x8e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a14      	ldr	r2, [pc, #80]	; (8003204 <TIM_OC1_SetConfig+0xdc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d111      	bne.n	80031da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	621a      	str	r2, [r3, #32]
}
 80031f4:	bf00      	nop
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40010000 	.word	0x40010000
 8003204:	40010400 	.word	0x40010400

08003208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f023 0210 	bic.w	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0320 	bic.w	r3, r3, #32
 8003252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a22      	ldr	r2, [pc, #136]	; (80032ec <TIM_OC2_SetConfig+0xe4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_OC2_SetConfig+0x68>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a21      	ldr	r2, [pc, #132]	; (80032f0 <TIM_OC2_SetConfig+0xe8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d10d      	bne.n	800328c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a17      	ldr	r2, [pc, #92]	; (80032ec <TIM_OC2_SetConfig+0xe4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_OC2_SetConfig+0x94>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a16      	ldr	r2, [pc, #88]	; (80032f0 <TIM_OC2_SetConfig+0xe8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d113      	bne.n	80032c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	621a      	str	r2, [r3, #32]
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40010400 	.word	0x40010400

080032f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800333c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <TIM_OC3_SetConfig+0xe0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_OC3_SetConfig+0x66>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a20      	ldr	r2, [pc, #128]	; (80033d8 <TIM_OC3_SetConfig+0xe4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10d      	bne.n	8003376 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <TIM_OC3_SetConfig+0xe0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_OC3_SetConfig+0x92>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <TIM_OC3_SetConfig+0xe4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d113      	bne.n	80033ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800338c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40010400 	.word	0x40010400

080033dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	031b      	lsls	r3, r3, #12
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a12      	ldr	r2, [pc, #72]	; (8003480 <TIM_OC4_SetConfig+0xa4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_OC4_SetConfig+0x68>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a11      	ldr	r2, [pc, #68]	; (8003484 <TIM_OC4_SetConfig+0xa8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d109      	bne.n	8003458 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800344a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000
 8003484:	40010400 	.word	0x40010400

08003488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 030a 	bic.w	r3, r3, #10
 80034c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b087      	sub	sp, #28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f023 0210 	bic.w	r2, r3, #16
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	031b      	lsls	r3, r3, #12
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	f043 0307 	orr.w	r3, r3, #7
 8003568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	021a      	lsls	r2, r3, #8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	431a      	orrs	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	609a      	str	r2, [r3, #8]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2201      	movs	r2, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1a      	ldr	r2, [r3, #32]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a1a      	ldr	r2, [r3, #32]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_TIMEx_PWMN_Start+0x24>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e022      	b.n	8003672 <HAL_TIMEx_PWMN_Start+0x6a>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d109      	bne.n	8003646 <HAL_TIMEx_PWMN_Start+0x3e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	e015      	b.n	8003672 <HAL_TIMEx_PWMN_Start+0x6a>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d109      	bne.n	8003660 <HAL_TIMEx_PWMN_Start+0x58>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e008      	b.n	8003672 <HAL_TIMEx_PWMN_Start+0x6a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e06d      	b.n	8003756 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_TIMEx_PWMN_Start+0x82>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003688:	e013      	b.n	80036b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d104      	bne.n	800369a <HAL_TIMEx_PWMN_Start+0x92>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	e00b      	b.n	80036b2 <HAL_TIMEx_PWMN_Start+0xaa>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d104      	bne.n	80036aa <HAL_TIMEx_PWMN_Start+0xa2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a8:	e003      	b.n	80036b2 <HAL_TIMEx_PWMN_Start+0xaa>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2204      	movs	r2, #4
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f99e 	bl	80039fc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_TIMEx_PWMN_Start+0x158>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d022      	beq.n	8003720 <HAL_TIMEx_PWMN_Start+0x118>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e2:	d01d      	beq.n	8003720 <HAL_TIMEx_PWMN_Start+0x118>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_TIMEx_PWMN_Start+0x15c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d018      	beq.n	8003720 <HAL_TIMEx_PWMN_Start+0x118>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_TIMEx_PWMN_Start+0x160>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_TIMEx_PWMN_Start+0x118>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_TIMEx_PWMN_Start+0x164>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00e      	beq.n	8003720 <HAL_TIMEx_PWMN_Start+0x118>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_TIMEx_PWMN_Start+0x168>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_TIMEx_PWMN_Start+0x118>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIMEx_PWMN_Start+0x16c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_TIMEx_PWMN_Start+0x118>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_TIMEx_PWMN_Start+0x170>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d111      	bne.n	8003744 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b06      	cmp	r3, #6
 8003730:	d010      	beq.n	8003754 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003742:	e007      	b.n	8003754 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40000400 	.word	0x40000400
 8003768:	40000800 	.word	0x40000800
 800376c:	40000c00 	.word	0x40000c00
 8003770:	40010400 	.word	0x40010400
 8003774:	40014000 	.word	0x40014000
 8003778:	40001800 	.word	0x40001800

0800377c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f934 	bl	80039fc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a1a      	ldr	r2, [r3, #32]
 800379a:	f241 1311 	movw	r3, #4369	; 0x1111
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10f      	bne.n	80037c4 <HAL_TIMEx_PWMN_Stop+0x48>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	f240 4344 	movw	r3, #1092	; 0x444
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_TIMEx_PWMN_Stop+0x48>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6a1a      	ldr	r2, [r3, #32]
 80037ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10f      	bne.n	80037f4 <HAL_TIMEx_PWMN_Stop+0x78>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	f240 4344 	movw	r3, #1092	; 0x444
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <HAL_TIMEx_PWMN_Stop+0x78>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <HAL_TIMEx_PWMN_Stop+0x88>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003802:	e013      	b.n	800382c <HAL_TIMEx_PWMN_Stop+0xb0>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b04      	cmp	r3, #4
 8003808:	d104      	bne.n	8003814 <HAL_TIMEx_PWMN_Stop+0x98>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003812:	e00b      	b.n	800382c <HAL_TIMEx_PWMN_Stop+0xb0>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d104      	bne.n	8003824 <HAL_TIMEx_PWMN_Stop+0xa8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003822:	e003      	b.n	800382c <HAL_TIMEx_PWMN_Stop+0xb0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800384c:	2302      	movs	r3, #2
 800384e:	e05a      	b.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a21      	ldr	r2, [pc, #132]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d022      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d01d      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d018      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1b      	ldr	r2, [pc, #108]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00e      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a18      	ldr	r2, [pc, #96]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a17      	ldr	r2, [pc, #92]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a15      	ldr	r2, [pc, #84]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10c      	bne.n	80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40010400 	.word	0x40010400
 8003928:	40014000 	.word	0x40014000
 800392c:	40001800 	.word	0x40001800

08003930 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003948:	2302      	movs	r3, #2
 800394a:	e03d      	b.n	80039c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4313      	orrs	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2204      	movs	r2, #4
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1a      	ldr	r2, [r3, #32]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <__libc_init_array>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	4d0d      	ldr	r5, [pc, #52]	; (8003a80 <__libc_init_array+0x38>)
 8003a4c:	4c0d      	ldr	r4, [pc, #52]	; (8003a84 <__libc_init_array+0x3c>)
 8003a4e:	1b64      	subs	r4, r4, r5
 8003a50:	10a4      	asrs	r4, r4, #2
 8003a52:	2600      	movs	r6, #0
 8003a54:	42a6      	cmp	r6, r4
 8003a56:	d109      	bne.n	8003a6c <__libc_init_array+0x24>
 8003a58:	4d0b      	ldr	r5, [pc, #44]	; (8003a88 <__libc_init_array+0x40>)
 8003a5a:	4c0c      	ldr	r4, [pc, #48]	; (8003a8c <__libc_init_array+0x44>)
 8003a5c:	f001 f856 	bl	8004b0c <_init>
 8003a60:	1b64      	subs	r4, r4, r5
 8003a62:	10a4      	asrs	r4, r4, #2
 8003a64:	2600      	movs	r6, #0
 8003a66:	42a6      	cmp	r6, r4
 8003a68:	d105      	bne.n	8003a76 <__libc_init_array+0x2e>
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a70:	4798      	blx	r3
 8003a72:	3601      	adds	r6, #1
 8003a74:	e7ee      	b.n	8003a54 <__libc_init_array+0xc>
 8003a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7a:	4798      	blx	r3
 8003a7c:	3601      	adds	r6, #1
 8003a7e:	e7f2      	b.n	8003a66 <__libc_init_array+0x1e>
 8003a80:	08004d18 	.word	0x08004d18
 8003a84:	08004d18 	.word	0x08004d18
 8003a88:	08004d18 	.word	0x08004d18
 8003a8c:	08004d1c 	.word	0x08004d1c

08003a90 <memset>:
 8003a90:	4402      	add	r2, r0
 8003a92:	4603      	mov	r3, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <sin>:
 8003aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003aa2:	ec53 2b10 	vmov	r2, r3, d0
 8003aa6:	4826      	ldr	r0, [pc, #152]	; (8003b40 <sin+0xa0>)
 8003aa8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003aac:	4281      	cmp	r1, r0
 8003aae:	dc07      	bgt.n	8003ac0 <sin+0x20>
 8003ab0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003b38 <sin+0x98>
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f000 fe5b 	bl	8004770 <__kernel_sin>
 8003aba:	ec51 0b10 	vmov	r0, r1, d0
 8003abe:	e007      	b.n	8003ad0 <sin+0x30>
 8003ac0:	4820      	ldr	r0, [pc, #128]	; (8003b44 <sin+0xa4>)
 8003ac2:	4281      	cmp	r1, r0
 8003ac4:	dd09      	ble.n	8003ada <sin+0x3a>
 8003ac6:	ee10 0a10 	vmov	r0, s0
 8003aca:	4619      	mov	r1, r3
 8003acc:	f7fc fcaa 	bl	8000424 <__aeabi_dsub>
 8003ad0:	ec41 0b10 	vmov	d0, r0, r1
 8003ad4:	b005      	add	sp, #20
 8003ad6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ada:	4668      	mov	r0, sp
 8003adc:	f000 f834 	bl	8003b48 <__ieee754_rem_pio2>
 8003ae0:	f000 0003 	and.w	r0, r0, #3
 8003ae4:	2801      	cmp	r0, #1
 8003ae6:	d008      	beq.n	8003afa <sin+0x5a>
 8003ae8:	2802      	cmp	r0, #2
 8003aea:	d00d      	beq.n	8003b08 <sin+0x68>
 8003aec:	b9d0      	cbnz	r0, 8003b24 <sin+0x84>
 8003aee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003af2:	ed9d 0b00 	vldr	d0, [sp]
 8003af6:	2001      	movs	r0, #1
 8003af8:	e7dd      	b.n	8003ab6 <sin+0x16>
 8003afa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003afe:	ed9d 0b00 	vldr	d0, [sp]
 8003b02:	f000 fa2d 	bl	8003f60 <__kernel_cos>
 8003b06:	e7d8      	b.n	8003aba <sin+0x1a>
 8003b08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b0c:	ed9d 0b00 	vldr	d0, [sp]
 8003b10:	2001      	movs	r0, #1
 8003b12:	f000 fe2d 	bl	8004770 <__kernel_sin>
 8003b16:	ec53 2b10 	vmov	r2, r3, d0
 8003b1a:	ee10 0a10 	vmov	r0, s0
 8003b1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003b22:	e7d5      	b.n	8003ad0 <sin+0x30>
 8003b24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003b28:	ed9d 0b00 	vldr	d0, [sp]
 8003b2c:	f000 fa18 	bl	8003f60 <__kernel_cos>
 8003b30:	e7f1      	b.n	8003b16 <sin+0x76>
 8003b32:	bf00      	nop
 8003b34:	f3af 8000 	nop.w
	...
 8003b40:	3fe921fb 	.word	0x3fe921fb
 8003b44:	7fefffff 	.word	0x7fefffff

08003b48 <__ieee754_rem_pio2>:
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	ed2d 8b02 	vpush	{d8}
 8003b50:	ec55 4b10 	vmov	r4, r5, d0
 8003b54:	4bca      	ldr	r3, [pc, #808]	; (8003e80 <__ieee754_rem_pio2+0x338>)
 8003b56:	b08b      	sub	sp, #44	; 0x2c
 8003b58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003b5c:	4598      	cmp	r8, r3
 8003b5e:	4682      	mov	sl, r0
 8003b60:	9502      	str	r5, [sp, #8]
 8003b62:	dc08      	bgt.n	8003b76 <__ieee754_rem_pio2+0x2e>
 8003b64:	2200      	movs	r2, #0
 8003b66:	2300      	movs	r3, #0
 8003b68:	ed80 0b00 	vstr	d0, [r0]
 8003b6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003b70:	f04f 0b00 	mov.w	fp, #0
 8003b74:	e028      	b.n	8003bc8 <__ieee754_rem_pio2+0x80>
 8003b76:	4bc3      	ldr	r3, [pc, #780]	; (8003e84 <__ieee754_rem_pio2+0x33c>)
 8003b78:	4598      	cmp	r8, r3
 8003b7a:	dc78      	bgt.n	8003c6e <__ieee754_rem_pio2+0x126>
 8003b7c:	9b02      	ldr	r3, [sp, #8]
 8003b7e:	4ec2      	ldr	r6, [pc, #776]	; (8003e88 <__ieee754_rem_pio2+0x340>)
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	ee10 0a10 	vmov	r0, s0
 8003b86:	a3b0      	add	r3, pc, #704	; (adr r3, 8003e48 <__ieee754_rem_pio2+0x300>)
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	dd39      	ble.n	8003c04 <__ieee754_rem_pio2+0xbc>
 8003b90:	f7fc fc48 	bl	8000424 <__aeabi_dsub>
 8003b94:	45b0      	cmp	r8, r6
 8003b96:	4604      	mov	r4, r0
 8003b98:	460d      	mov	r5, r1
 8003b9a:	d01b      	beq.n	8003bd4 <__ieee754_rem_pio2+0x8c>
 8003b9c:	a3ac      	add	r3, pc, #688	; (adr r3, 8003e50 <__ieee754_rem_pio2+0x308>)
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f7fc fc3f 	bl	8000424 <__aeabi_dsub>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	e9ca 2300 	strd	r2, r3, [sl]
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f7fc fc37 	bl	8000424 <__aeabi_dsub>
 8003bb6:	a3a6      	add	r3, pc, #664	; (adr r3, 8003e50 <__ieee754_rem_pio2+0x308>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f7fc fc32 	bl	8000424 <__aeabi_dsub>
 8003bc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003bc4:	f04f 0b01 	mov.w	fp, #1
 8003bc8:	4658      	mov	r0, fp
 8003bca:	b00b      	add	sp, #44	; 0x2c
 8003bcc:	ecbd 8b02 	vpop	{d8}
 8003bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd4:	a3a0      	add	r3, pc, #640	; (adr r3, 8003e58 <__ieee754_rem_pio2+0x310>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc fc23 	bl	8000424 <__aeabi_dsub>
 8003bde:	a3a0      	add	r3, pc, #640	; (adr r3, 8003e60 <__ieee754_rem_pio2+0x318>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	4604      	mov	r4, r0
 8003be6:	460d      	mov	r5, r1
 8003be8:	f7fc fc1c 	bl	8000424 <__aeabi_dsub>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	e9ca 2300 	strd	r2, r3, [sl]
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	f7fc fc14 	bl	8000424 <__aeabi_dsub>
 8003bfc:	a398      	add	r3, pc, #608	; (adr r3, 8003e60 <__ieee754_rem_pio2+0x318>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	e7db      	b.n	8003bbc <__ieee754_rem_pio2+0x74>
 8003c04:	f7fc fc10 	bl	8000428 <__adddf3>
 8003c08:	45b0      	cmp	r8, r6
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	460d      	mov	r5, r1
 8003c0e:	d016      	beq.n	8003c3e <__ieee754_rem_pio2+0xf6>
 8003c10:	a38f      	add	r3, pc, #572	; (adr r3, 8003e50 <__ieee754_rem_pio2+0x308>)
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f7fc fc07 	bl	8000428 <__adddf3>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	e9ca 2300 	strd	r2, r3, [sl]
 8003c22:	4620      	mov	r0, r4
 8003c24:	4629      	mov	r1, r5
 8003c26:	f7fc fbfd 	bl	8000424 <__aeabi_dsub>
 8003c2a:	a389      	add	r3, pc, #548	; (adr r3, 8003e50 <__ieee754_rem_pio2+0x308>)
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f7fc fbfa 	bl	8000428 <__adddf3>
 8003c34:	f04f 3bff 	mov.w	fp, #4294967295
 8003c38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003c3c:	e7c4      	b.n	8003bc8 <__ieee754_rem_pio2+0x80>
 8003c3e:	a386      	add	r3, pc, #536	; (adr r3, 8003e58 <__ieee754_rem_pio2+0x310>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fc fbf0 	bl	8000428 <__adddf3>
 8003c48:	a385      	add	r3, pc, #532	; (adr r3, 8003e60 <__ieee754_rem_pio2+0x318>)
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	4604      	mov	r4, r0
 8003c50:	460d      	mov	r5, r1
 8003c52:	f7fc fbe9 	bl	8000428 <__adddf3>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	e9ca 2300 	strd	r2, r3, [sl]
 8003c5e:	4620      	mov	r0, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	f7fc fbdf 	bl	8000424 <__aeabi_dsub>
 8003c66:	a37e      	add	r3, pc, #504	; (adr r3, 8003e60 <__ieee754_rem_pio2+0x318>)
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	e7e0      	b.n	8003c30 <__ieee754_rem_pio2+0xe8>
 8003c6e:	4b87      	ldr	r3, [pc, #540]	; (8003e8c <__ieee754_rem_pio2+0x344>)
 8003c70:	4598      	cmp	r8, r3
 8003c72:	f300 80d9 	bgt.w	8003e28 <__ieee754_rem_pio2+0x2e0>
 8003c76:	f000 fe39 	bl	80048ec <fabs>
 8003c7a:	ec55 4b10 	vmov	r4, r5, d0
 8003c7e:	ee10 0a10 	vmov	r0, s0
 8003c82:	a379      	add	r3, pc, #484	; (adr r3, 8003e68 <__ieee754_rem_pio2+0x320>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	4629      	mov	r1, r5
 8003c8a:	f7fc fa9d 	bl	80001c8 <__aeabi_dmul>
 8003c8e:	4b80      	ldr	r3, [pc, #512]	; (8003e90 <__ieee754_rem_pio2+0x348>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	f7fc fbc9 	bl	8000428 <__adddf3>
 8003c96:	f7fc fe05 	bl	80008a4 <__aeabi_d2iz>
 8003c9a:	4683      	mov	fp, r0
 8003c9c:	f7fc fd10 	bl	80006c0 <__aeabi_i2d>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	ec43 2b18 	vmov	d8, r2, r3
 8003ca8:	a367      	add	r3, pc, #412	; (adr r3, 8003e48 <__ieee754_rem_pio2+0x300>)
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f7fc fa8b 	bl	80001c8 <__aeabi_dmul>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	4629      	mov	r1, r5
 8003cba:	f7fc fbb3 	bl	8000424 <__aeabi_dsub>
 8003cbe:	a364      	add	r3, pc, #400	; (adr r3, 8003e50 <__ieee754_rem_pio2+0x308>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	460f      	mov	r7, r1
 8003cc8:	ec51 0b18 	vmov	r0, r1, d8
 8003ccc:	f7fc fa7c 	bl	80001c8 <__aeabi_dmul>
 8003cd0:	f1bb 0f1f 	cmp.w	fp, #31
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	dc0d      	bgt.n	8003cf6 <__ieee754_rem_pio2+0x1ae>
 8003cda:	4b6e      	ldr	r3, [pc, #440]	; (8003e94 <__ieee754_rem_pio2+0x34c>)
 8003cdc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce4:	4543      	cmp	r3, r8
 8003ce6:	d006      	beq.n	8003cf6 <__ieee754_rem_pio2+0x1ae>
 8003ce8:	4622      	mov	r2, r4
 8003cea:	462b      	mov	r3, r5
 8003cec:	4630      	mov	r0, r6
 8003cee:	4639      	mov	r1, r7
 8003cf0:	f7fc fb98 	bl	8000424 <__aeabi_dsub>
 8003cf4:	e00f      	b.n	8003d16 <__ieee754_rem_pio2+0x1ce>
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	4622      	mov	r2, r4
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	4639      	mov	r1, r7
 8003cfe:	f7fc fb91 	bl	8000424 <__aeabi_dsub>
 8003d02:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d0c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8003d10:	f1b8 0f10 	cmp.w	r8, #16
 8003d14:	dc02      	bgt.n	8003d1c <__ieee754_rem_pio2+0x1d4>
 8003d16:	e9ca 0100 	strd	r0, r1, [sl]
 8003d1a:	e039      	b.n	8003d90 <__ieee754_rem_pio2+0x248>
 8003d1c:	a34e      	add	r3, pc, #312	; (adr r3, 8003e58 <__ieee754_rem_pio2+0x310>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	ec51 0b18 	vmov	r0, r1, d8
 8003d26:	f7fc fa4f 	bl	80001c8 <__aeabi_dmul>
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	460d      	mov	r5, r1
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4630      	mov	r0, r6
 8003d34:	4639      	mov	r1, r7
 8003d36:	f7fc fb75 	bl	8000424 <__aeabi_dsub>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4680      	mov	r8, r0
 8003d40:	4689      	mov	r9, r1
 8003d42:	4630      	mov	r0, r6
 8003d44:	4639      	mov	r1, r7
 8003d46:	f7fc fb6d 	bl	8000424 <__aeabi_dsub>
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	f7fc fb69 	bl	8000424 <__aeabi_dsub>
 8003d52:	a343      	add	r3, pc, #268	; (adr r3, 8003e60 <__ieee754_rem_pio2+0x318>)
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	4604      	mov	r4, r0
 8003d5a:	460d      	mov	r5, r1
 8003d5c:	ec51 0b18 	vmov	r0, r1, d8
 8003d60:	f7fc fa32 	bl	80001c8 <__aeabi_dmul>
 8003d64:	4622      	mov	r2, r4
 8003d66:	462b      	mov	r3, r5
 8003d68:	f7fc fb5c 	bl	8000424 <__aeabi_dsub>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4604      	mov	r4, r0
 8003d72:	460d      	mov	r5, r1
 8003d74:	4640      	mov	r0, r8
 8003d76:	4649      	mov	r1, r9
 8003d78:	f7fc fb54 	bl	8000424 <__aeabi_dsub>
 8003d7c:	9a03      	ldr	r2, [sp, #12]
 8003d7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b31      	cmp	r3, #49	; 0x31
 8003d86:	dc24      	bgt.n	8003dd2 <__ieee754_rem_pio2+0x28a>
 8003d88:	e9ca 0100 	strd	r0, r1, [sl]
 8003d8c:	4646      	mov	r6, r8
 8003d8e:	464f      	mov	r7, r9
 8003d90:	e9da 8900 	ldrd	r8, r9, [sl]
 8003d94:	4630      	mov	r0, r6
 8003d96:	4642      	mov	r2, r8
 8003d98:	464b      	mov	r3, r9
 8003d9a:	4639      	mov	r1, r7
 8003d9c:	f7fc fb42 	bl	8000424 <__aeabi_dsub>
 8003da0:	462b      	mov	r3, r5
 8003da2:	4622      	mov	r2, r4
 8003da4:	f7fc fb3e 	bl	8000424 <__aeabi_dsub>
 8003da8:	9b02      	ldr	r3, [sp, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003db0:	f6bf af0a 	bge.w	8003bc8 <__ieee754_rem_pio2+0x80>
 8003db4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003db8:	f8ca 3004 	str.w	r3, [sl, #4]
 8003dbc:	f8ca 8000 	str.w	r8, [sl]
 8003dc0:	f8ca 0008 	str.w	r0, [sl, #8]
 8003dc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dc8:	f8ca 300c 	str.w	r3, [sl, #12]
 8003dcc:	f1cb 0b00 	rsb	fp, fp, #0
 8003dd0:	e6fa      	b.n	8003bc8 <__ieee754_rem_pio2+0x80>
 8003dd2:	a327      	add	r3, pc, #156	; (adr r3, 8003e70 <__ieee754_rem_pio2+0x328>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	ec51 0b18 	vmov	r0, r1, d8
 8003ddc:	f7fc f9f4 	bl	80001c8 <__aeabi_dmul>
 8003de0:	4604      	mov	r4, r0
 8003de2:	460d      	mov	r5, r1
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4640      	mov	r0, r8
 8003dea:	4649      	mov	r1, r9
 8003dec:	f7fc fb1a 	bl	8000424 <__aeabi_dsub>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4606      	mov	r6, r0
 8003df6:	460f      	mov	r7, r1
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	f7fc fb12 	bl	8000424 <__aeabi_dsub>
 8003e00:	4622      	mov	r2, r4
 8003e02:	462b      	mov	r3, r5
 8003e04:	f7fc fb0e 	bl	8000424 <__aeabi_dsub>
 8003e08:	a31b      	add	r3, pc, #108	; (adr r3, 8003e78 <__ieee754_rem_pio2+0x330>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	4604      	mov	r4, r0
 8003e10:	460d      	mov	r5, r1
 8003e12:	ec51 0b18 	vmov	r0, r1, d8
 8003e16:	f7fc f9d7 	bl	80001c8 <__aeabi_dmul>
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	f7fc fb01 	bl	8000424 <__aeabi_dsub>
 8003e22:	4604      	mov	r4, r0
 8003e24:	460d      	mov	r5, r1
 8003e26:	e75f      	b.n	8003ce8 <__ieee754_rem_pio2+0x1a0>
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <__ieee754_rem_pio2+0x350>)
 8003e2a:	4598      	cmp	r8, r3
 8003e2c:	dd36      	ble.n	8003e9c <__ieee754_rem_pio2+0x354>
 8003e2e:	ee10 2a10 	vmov	r2, s0
 8003e32:	462b      	mov	r3, r5
 8003e34:	4620      	mov	r0, r4
 8003e36:	4629      	mov	r1, r5
 8003e38:	f7fc faf4 	bl	8000424 <__aeabi_dsub>
 8003e3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003e40:	e9ca 0100 	strd	r0, r1, [sl]
 8003e44:	e694      	b.n	8003b70 <__ieee754_rem_pio2+0x28>
 8003e46:	bf00      	nop
 8003e48:	54400000 	.word	0x54400000
 8003e4c:	3ff921fb 	.word	0x3ff921fb
 8003e50:	1a626331 	.word	0x1a626331
 8003e54:	3dd0b461 	.word	0x3dd0b461
 8003e58:	1a600000 	.word	0x1a600000
 8003e5c:	3dd0b461 	.word	0x3dd0b461
 8003e60:	2e037073 	.word	0x2e037073
 8003e64:	3ba3198a 	.word	0x3ba3198a
 8003e68:	6dc9c883 	.word	0x6dc9c883
 8003e6c:	3fe45f30 	.word	0x3fe45f30
 8003e70:	2e000000 	.word	0x2e000000
 8003e74:	3ba3198a 	.word	0x3ba3198a
 8003e78:	252049c1 	.word	0x252049c1
 8003e7c:	397b839a 	.word	0x397b839a
 8003e80:	3fe921fb 	.word	0x3fe921fb
 8003e84:	4002d97b 	.word	0x4002d97b
 8003e88:	3ff921fb 	.word	0x3ff921fb
 8003e8c:	413921fb 	.word	0x413921fb
 8003e90:	3fe00000 	.word	0x3fe00000
 8003e94:	08004b38 	.word	0x08004b38
 8003e98:	7fefffff 	.word	0x7fefffff
 8003e9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8003ea0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8003ea4:	ee10 0a10 	vmov	r0, s0
 8003ea8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8003eac:	ee10 6a10 	vmov	r6, s0
 8003eb0:	460f      	mov	r7, r1
 8003eb2:	f7fc fcf7 	bl	80008a4 <__aeabi_d2iz>
 8003eb6:	f7fc fc03 	bl	80006c0 <__aeabi_i2d>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	4639      	mov	r1, r7
 8003ec2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ec6:	f7fc faad 	bl	8000424 <__aeabi_dsub>
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <__ieee754_rem_pio2+0x40c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f7fc f97b 	bl	80001c8 <__aeabi_dmul>
 8003ed2:	460f      	mov	r7, r1
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	f7fc fce5 	bl	80008a4 <__aeabi_d2iz>
 8003eda:	f7fc fbf1 	bl	80006c0 <__aeabi_i2d>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	4639      	mov	r1, r7
 8003ee6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003eea:	f7fc fa9b 	bl	8000424 <__aeabi_dsub>
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <__ieee754_rem_pio2+0x40c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f7fc f969 	bl	80001c8 <__aeabi_dmul>
 8003ef6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003efa:	ad04      	add	r5, sp, #16
 8003efc:	f04f 0803 	mov.w	r8, #3
 8003f00:	46a9      	mov	r9, r5
 8003f02:	2600      	movs	r6, #0
 8003f04:	2700      	movs	r7, #0
 8003f06:	4632      	mov	r2, r6
 8003f08:	463b      	mov	r3, r7
 8003f0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003f0e:	46c3      	mov	fp, r8
 8003f10:	3d08      	subs	r5, #8
 8003f12:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f16:	f7fc fc93 	bl	8000840 <__aeabi_dcmpeq>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d1f3      	bne.n	8003f06 <__ieee754_rem_pio2+0x3be>
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <__ieee754_rem_pio2+0x410>)
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	2302      	movs	r3, #2
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4622      	mov	r2, r4
 8003f28:	465b      	mov	r3, fp
 8003f2a:	4651      	mov	r1, sl
 8003f2c:	4648      	mov	r0, r9
 8003f2e:	f000 f8df 	bl	80040f0 <__kernel_rem_pio2>
 8003f32:	9b02      	ldr	r3, [sp, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	4683      	mov	fp, r0
 8003f38:	f6bf ae46 	bge.w	8003bc8 <__ieee754_rem_pio2+0x80>
 8003f3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003f40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003f44:	f8ca 3004 	str.w	r3, [sl, #4]
 8003f48:	f8da 300c 	ldr.w	r3, [sl, #12]
 8003f4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003f50:	e73a      	b.n	8003dc8 <__ieee754_rem_pio2+0x280>
 8003f52:	bf00      	nop
 8003f54:	41700000 	.word	0x41700000
 8003f58:	08004bb8 	.word	0x08004bb8
 8003f5c:	00000000 	.word	0x00000000

08003f60 <__kernel_cos>:
 8003f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f64:	ec57 6b10 	vmov	r6, r7, d0
 8003f68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003f6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003f70:	ed8d 1b00 	vstr	d1, [sp]
 8003f74:	da07      	bge.n	8003f86 <__kernel_cos+0x26>
 8003f76:	ee10 0a10 	vmov	r0, s0
 8003f7a:	4639      	mov	r1, r7
 8003f7c:	f7fc fc92 	bl	80008a4 <__aeabi_d2iz>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	f000 8088 	beq.w	8004096 <__kernel_cos+0x136>
 8003f86:	4632      	mov	r2, r6
 8003f88:	463b      	mov	r3, r7
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	4639      	mov	r1, r7
 8003f8e:	f7fc f91b 	bl	80001c8 <__aeabi_dmul>
 8003f92:	4b51      	ldr	r3, [pc, #324]	; (80040d8 <__kernel_cos+0x178>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	4604      	mov	r4, r0
 8003f98:	460d      	mov	r5, r1
 8003f9a:	f7fc f915 	bl	80001c8 <__aeabi_dmul>
 8003f9e:	a340      	add	r3, pc, #256	; (adr r3, 80040a0 <__kernel_cos+0x140>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	4682      	mov	sl, r0
 8003fa6:	468b      	mov	fp, r1
 8003fa8:	4620      	mov	r0, r4
 8003faa:	4629      	mov	r1, r5
 8003fac:	f7fc f90c 	bl	80001c8 <__aeabi_dmul>
 8003fb0:	a33d      	add	r3, pc, #244	; (adr r3, 80040a8 <__kernel_cos+0x148>)
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f7fc fa37 	bl	8000428 <__adddf3>
 8003fba:	4622      	mov	r2, r4
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	f7fc f903 	bl	80001c8 <__aeabi_dmul>
 8003fc2:	a33b      	add	r3, pc, #236	; (adr r3, 80040b0 <__kernel_cos+0x150>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f7fc fa2c 	bl	8000424 <__aeabi_dsub>
 8003fcc:	4622      	mov	r2, r4
 8003fce:	462b      	mov	r3, r5
 8003fd0:	f7fc f8fa 	bl	80001c8 <__aeabi_dmul>
 8003fd4:	a338      	add	r3, pc, #224	; (adr r3, 80040b8 <__kernel_cos+0x158>)
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	f7fc fa25 	bl	8000428 <__adddf3>
 8003fde:	4622      	mov	r2, r4
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	f7fc f8f1 	bl	80001c8 <__aeabi_dmul>
 8003fe6:	a336      	add	r3, pc, #216	; (adr r3, 80040c0 <__kernel_cos+0x160>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f7fc fa1a 	bl	8000424 <__aeabi_dsub>
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	f7fc f8e8 	bl	80001c8 <__aeabi_dmul>
 8003ff8:	a333      	add	r3, pc, #204	; (adr r3, 80040c8 <__kernel_cos+0x168>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc fa13 	bl	8000428 <__adddf3>
 8004002:	4622      	mov	r2, r4
 8004004:	462b      	mov	r3, r5
 8004006:	f7fc f8df 	bl	80001c8 <__aeabi_dmul>
 800400a:	4622      	mov	r2, r4
 800400c:	462b      	mov	r3, r5
 800400e:	f7fc f8db 	bl	80001c8 <__aeabi_dmul>
 8004012:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004016:	4604      	mov	r4, r0
 8004018:	460d      	mov	r5, r1
 800401a:	4630      	mov	r0, r6
 800401c:	4639      	mov	r1, r7
 800401e:	f7fc f8d3 	bl	80001c8 <__aeabi_dmul>
 8004022:	460b      	mov	r3, r1
 8004024:	4602      	mov	r2, r0
 8004026:	4629      	mov	r1, r5
 8004028:	4620      	mov	r0, r4
 800402a:	f7fc f9fb 	bl	8000424 <__aeabi_dsub>
 800402e:	4b2b      	ldr	r3, [pc, #172]	; (80040dc <__kernel_cos+0x17c>)
 8004030:	4598      	cmp	r8, r3
 8004032:	4606      	mov	r6, r0
 8004034:	460f      	mov	r7, r1
 8004036:	dc10      	bgt.n	800405a <__kernel_cos+0xfa>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4650      	mov	r0, sl
 800403e:	4659      	mov	r1, fp
 8004040:	f7fc f9f0 	bl	8000424 <__aeabi_dsub>
 8004044:	460b      	mov	r3, r1
 8004046:	4926      	ldr	r1, [pc, #152]	; (80040e0 <__kernel_cos+0x180>)
 8004048:	4602      	mov	r2, r0
 800404a:	2000      	movs	r0, #0
 800404c:	f7fc f9ea 	bl	8000424 <__aeabi_dsub>
 8004050:	ec41 0b10 	vmov	d0, r0, r1
 8004054:	b003      	add	sp, #12
 8004056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <__kernel_cos+0x184>)
 800405c:	4920      	ldr	r1, [pc, #128]	; (80040e0 <__kernel_cos+0x180>)
 800405e:	4598      	cmp	r8, r3
 8004060:	bfcc      	ite	gt
 8004062:	4d21      	ldrgt	r5, [pc, #132]	; (80040e8 <__kernel_cos+0x188>)
 8004064:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004068:	2400      	movs	r4, #0
 800406a:	4622      	mov	r2, r4
 800406c:	462b      	mov	r3, r5
 800406e:	2000      	movs	r0, #0
 8004070:	f7fc f9d8 	bl	8000424 <__aeabi_dsub>
 8004074:	4622      	mov	r2, r4
 8004076:	4680      	mov	r8, r0
 8004078:	4689      	mov	r9, r1
 800407a:	462b      	mov	r3, r5
 800407c:	4650      	mov	r0, sl
 800407e:	4659      	mov	r1, fp
 8004080:	f7fc f9d0 	bl	8000424 <__aeabi_dsub>
 8004084:	4632      	mov	r2, r6
 8004086:	463b      	mov	r3, r7
 8004088:	f7fc f9cc 	bl	8000424 <__aeabi_dsub>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4640      	mov	r0, r8
 8004092:	4649      	mov	r1, r9
 8004094:	e7da      	b.n	800404c <__kernel_cos+0xec>
 8004096:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80040d0 <__kernel_cos+0x170>
 800409a:	e7db      	b.n	8004054 <__kernel_cos+0xf4>
 800409c:	f3af 8000 	nop.w
 80040a0:	be8838d4 	.word	0xbe8838d4
 80040a4:	bda8fae9 	.word	0xbda8fae9
 80040a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80040ac:	3e21ee9e 	.word	0x3e21ee9e
 80040b0:	809c52ad 	.word	0x809c52ad
 80040b4:	3e927e4f 	.word	0x3e927e4f
 80040b8:	19cb1590 	.word	0x19cb1590
 80040bc:	3efa01a0 	.word	0x3efa01a0
 80040c0:	16c15177 	.word	0x16c15177
 80040c4:	3f56c16c 	.word	0x3f56c16c
 80040c8:	5555554c 	.word	0x5555554c
 80040cc:	3fa55555 	.word	0x3fa55555
 80040d0:	00000000 	.word	0x00000000
 80040d4:	3ff00000 	.word	0x3ff00000
 80040d8:	3fe00000 	.word	0x3fe00000
 80040dc:	3fd33332 	.word	0x3fd33332
 80040e0:	3ff00000 	.word	0x3ff00000
 80040e4:	3fe90000 	.word	0x3fe90000
 80040e8:	3fd20000 	.word	0x3fd20000
 80040ec:	00000000 	.word	0x00000000

080040f0 <__kernel_rem_pio2>:
 80040f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f4:	ed2d 8b02 	vpush	{d8}
 80040f8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80040fc:	f112 0f14 	cmn.w	r2, #20
 8004100:	9308      	str	r3, [sp, #32]
 8004102:	9101      	str	r1, [sp, #4]
 8004104:	4bc6      	ldr	r3, [pc, #792]	; (8004420 <__kernel_rem_pio2+0x330>)
 8004106:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004108:	9009      	str	r0, [sp, #36]	; 0x24
 800410a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800410e:	9304      	str	r3, [sp, #16]
 8004110:	9b08      	ldr	r3, [sp, #32]
 8004112:	f103 33ff 	add.w	r3, r3, #4294967295
 8004116:	bfa8      	it	ge
 8004118:	1ed4      	subge	r4, r2, #3
 800411a:	9306      	str	r3, [sp, #24]
 800411c:	bfb2      	itee	lt
 800411e:	2400      	movlt	r4, #0
 8004120:	2318      	movge	r3, #24
 8004122:	fb94 f4f3 	sdivge	r4, r4, r3
 8004126:	f06f 0317 	mvn.w	r3, #23
 800412a:	fb04 3303 	mla	r3, r4, r3, r3
 800412e:	eb03 0a02 	add.w	sl, r3, r2
 8004132:	9b04      	ldr	r3, [sp, #16]
 8004134:	9a06      	ldr	r2, [sp, #24]
 8004136:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004410 <__kernel_rem_pio2+0x320>
 800413a:	eb03 0802 	add.w	r8, r3, r2
 800413e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004140:	1aa7      	subs	r7, r4, r2
 8004142:	ae20      	add	r6, sp, #128	; 0x80
 8004144:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004148:	2500      	movs	r5, #0
 800414a:	4545      	cmp	r5, r8
 800414c:	dd18      	ble.n	8004180 <__kernel_rem_pio2+0x90>
 800414e:	9b08      	ldr	r3, [sp, #32]
 8004150:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004154:	aa20      	add	r2, sp, #128	; 0x80
 8004156:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004410 <__kernel_rem_pio2+0x320>
 800415a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800415e:	f1c3 0301 	rsb	r3, r3, #1
 8004162:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004166:	9307      	str	r3, [sp, #28]
 8004168:	9b07      	ldr	r3, [sp, #28]
 800416a:	9a04      	ldr	r2, [sp, #16]
 800416c:	4443      	add	r3, r8
 800416e:	429a      	cmp	r2, r3
 8004170:	db2f      	blt.n	80041d2 <__kernel_rem_pio2+0xe2>
 8004172:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004176:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800417a:	462f      	mov	r7, r5
 800417c:	2600      	movs	r6, #0
 800417e:	e01b      	b.n	80041b8 <__kernel_rem_pio2+0xc8>
 8004180:	42ef      	cmn	r7, r5
 8004182:	d407      	bmi.n	8004194 <__kernel_rem_pio2+0xa4>
 8004184:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004188:	f7fc fa9a 	bl	80006c0 <__aeabi_i2d>
 800418c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004190:	3501      	adds	r5, #1
 8004192:	e7da      	b.n	800414a <__kernel_rem_pio2+0x5a>
 8004194:	ec51 0b18 	vmov	r0, r1, d8
 8004198:	e7f8      	b.n	800418c <__kernel_rem_pio2+0x9c>
 800419a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800419e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80041a2:	f7fc f811 	bl	80001c8 <__aeabi_dmul>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041ae:	f7fc f93b 	bl	8000428 <__adddf3>
 80041b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041b6:	3601      	adds	r6, #1
 80041b8:	9b06      	ldr	r3, [sp, #24]
 80041ba:	429e      	cmp	r6, r3
 80041bc:	f1a7 0708 	sub.w	r7, r7, #8
 80041c0:	ddeb      	ble.n	800419a <__kernel_rem_pio2+0xaa>
 80041c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041c6:	3508      	adds	r5, #8
 80041c8:	ecab 7b02 	vstmia	fp!, {d7}
 80041cc:	f108 0801 	add.w	r8, r8, #1
 80041d0:	e7ca      	b.n	8004168 <__kernel_rem_pio2+0x78>
 80041d2:	9b04      	ldr	r3, [sp, #16]
 80041d4:	aa0c      	add	r2, sp, #48	; 0x30
 80041d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80041da:	930b      	str	r3, [sp, #44]	; 0x2c
 80041dc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80041de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80041e2:	9c04      	ldr	r4, [sp, #16]
 80041e4:	930a      	str	r3, [sp, #40]	; 0x28
 80041e6:	ab98      	add	r3, sp, #608	; 0x260
 80041e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041ec:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80041f0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80041f4:	f8cd b008 	str.w	fp, [sp, #8]
 80041f8:	4625      	mov	r5, r4
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	dc78      	bgt.n	80042f0 <__kernel_rem_pio2+0x200>
 80041fe:	ec47 6b10 	vmov	d0, r6, r7
 8004202:	4650      	mov	r0, sl
 8004204:	f000 fbfc 	bl	8004a00 <scalbn>
 8004208:	ec57 6b10 	vmov	r6, r7, d0
 800420c:	2200      	movs	r2, #0
 800420e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004212:	ee10 0a10 	vmov	r0, s0
 8004216:	4639      	mov	r1, r7
 8004218:	f7fb ffd6 	bl	80001c8 <__aeabi_dmul>
 800421c:	ec41 0b10 	vmov	d0, r0, r1
 8004220:	f000 fb6e 	bl	8004900 <floor>
 8004224:	4b7f      	ldr	r3, [pc, #508]	; (8004424 <__kernel_rem_pio2+0x334>)
 8004226:	ec51 0b10 	vmov	r0, r1, d0
 800422a:	2200      	movs	r2, #0
 800422c:	f7fb ffcc 	bl	80001c8 <__aeabi_dmul>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4630      	mov	r0, r6
 8004236:	4639      	mov	r1, r7
 8004238:	f7fc f8f4 	bl	8000424 <__aeabi_dsub>
 800423c:	460f      	mov	r7, r1
 800423e:	4606      	mov	r6, r0
 8004240:	f7fc fb30 	bl	80008a4 <__aeabi_d2iz>
 8004244:	9007      	str	r0, [sp, #28]
 8004246:	f7fc fa3b 	bl	80006c0 <__aeabi_i2d>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4630      	mov	r0, r6
 8004250:	4639      	mov	r1, r7
 8004252:	f7fc f8e7 	bl	8000424 <__aeabi_dsub>
 8004256:	f1ba 0f00 	cmp.w	sl, #0
 800425a:	4606      	mov	r6, r0
 800425c:	460f      	mov	r7, r1
 800425e:	dd70      	ble.n	8004342 <__kernel_rem_pio2+0x252>
 8004260:	1e62      	subs	r2, r4, #1
 8004262:	ab0c      	add	r3, sp, #48	; 0x30
 8004264:	9d07      	ldr	r5, [sp, #28]
 8004266:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800426a:	f1ca 0118 	rsb	r1, sl, #24
 800426e:	fa40 f301 	asr.w	r3, r0, r1
 8004272:	441d      	add	r5, r3
 8004274:	408b      	lsls	r3, r1
 8004276:	1ac0      	subs	r0, r0, r3
 8004278:	ab0c      	add	r3, sp, #48	; 0x30
 800427a:	9507      	str	r5, [sp, #28]
 800427c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004280:	f1ca 0317 	rsb	r3, sl, #23
 8004284:	fa40 f303 	asr.w	r3, r0, r3
 8004288:	9302      	str	r3, [sp, #8]
 800428a:	9b02      	ldr	r3, [sp, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	dd66      	ble.n	800435e <__kernel_rem_pio2+0x26e>
 8004290:	9b07      	ldr	r3, [sp, #28]
 8004292:	2200      	movs	r2, #0
 8004294:	3301      	adds	r3, #1
 8004296:	9307      	str	r3, [sp, #28]
 8004298:	4615      	mov	r5, r2
 800429a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800429e:	4294      	cmp	r4, r2
 80042a0:	f300 8099 	bgt.w	80043d6 <__kernel_rem_pio2+0x2e6>
 80042a4:	f1ba 0f00 	cmp.w	sl, #0
 80042a8:	dd07      	ble.n	80042ba <__kernel_rem_pio2+0x1ca>
 80042aa:	f1ba 0f01 	cmp.w	sl, #1
 80042ae:	f000 80a5 	beq.w	80043fc <__kernel_rem_pio2+0x30c>
 80042b2:	f1ba 0f02 	cmp.w	sl, #2
 80042b6:	f000 80c1 	beq.w	800443c <__kernel_rem_pio2+0x34c>
 80042ba:	9b02      	ldr	r3, [sp, #8]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d14e      	bne.n	800435e <__kernel_rem_pio2+0x26e>
 80042c0:	4632      	mov	r2, r6
 80042c2:	463b      	mov	r3, r7
 80042c4:	4958      	ldr	r1, [pc, #352]	; (8004428 <__kernel_rem_pio2+0x338>)
 80042c6:	2000      	movs	r0, #0
 80042c8:	f7fc f8ac 	bl	8000424 <__aeabi_dsub>
 80042cc:	4606      	mov	r6, r0
 80042ce:	460f      	mov	r7, r1
 80042d0:	2d00      	cmp	r5, #0
 80042d2:	d044      	beq.n	800435e <__kernel_rem_pio2+0x26e>
 80042d4:	4650      	mov	r0, sl
 80042d6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004418 <__kernel_rem_pio2+0x328>
 80042da:	f000 fb91 	bl	8004a00 <scalbn>
 80042de:	4630      	mov	r0, r6
 80042e0:	4639      	mov	r1, r7
 80042e2:	ec53 2b10 	vmov	r2, r3, d0
 80042e6:	f7fc f89d 	bl	8000424 <__aeabi_dsub>
 80042ea:	4606      	mov	r6, r0
 80042ec:	460f      	mov	r7, r1
 80042ee:	e036      	b.n	800435e <__kernel_rem_pio2+0x26e>
 80042f0:	4b4e      	ldr	r3, [pc, #312]	; (800442c <__kernel_rem_pio2+0x33c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	4630      	mov	r0, r6
 80042f6:	4639      	mov	r1, r7
 80042f8:	f7fb ff66 	bl	80001c8 <__aeabi_dmul>
 80042fc:	f7fc fad2 	bl	80008a4 <__aeabi_d2iz>
 8004300:	f7fc f9de 	bl	80006c0 <__aeabi_i2d>
 8004304:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <__kernel_rem_pio2+0x340>)
 8004306:	2200      	movs	r2, #0
 8004308:	4680      	mov	r8, r0
 800430a:	4689      	mov	r9, r1
 800430c:	f7fb ff5c 	bl	80001c8 <__aeabi_dmul>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4630      	mov	r0, r6
 8004316:	4639      	mov	r1, r7
 8004318:	f7fc f884 	bl	8000424 <__aeabi_dsub>
 800431c:	f7fc fac2 	bl	80008a4 <__aeabi_d2iz>
 8004320:	9b02      	ldr	r3, [sp, #8]
 8004322:	f843 0b04 	str.w	r0, [r3], #4
 8004326:	3d01      	subs	r5, #1
 8004328:	9302      	str	r3, [sp, #8]
 800432a:	ab70      	add	r3, sp, #448	; 0x1c0
 800432c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	4640      	mov	r0, r8
 8004336:	4649      	mov	r1, r9
 8004338:	f7fc f876 	bl	8000428 <__adddf3>
 800433c:	4606      	mov	r6, r0
 800433e:	460f      	mov	r7, r1
 8004340:	e75b      	b.n	80041fa <__kernel_rem_pio2+0x10a>
 8004342:	d105      	bne.n	8004350 <__kernel_rem_pio2+0x260>
 8004344:	1e63      	subs	r3, r4, #1
 8004346:	aa0c      	add	r2, sp, #48	; 0x30
 8004348:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800434c:	15c3      	asrs	r3, r0, #23
 800434e:	e79b      	b.n	8004288 <__kernel_rem_pio2+0x198>
 8004350:	4b38      	ldr	r3, [pc, #224]	; (8004434 <__kernel_rem_pio2+0x344>)
 8004352:	2200      	movs	r2, #0
 8004354:	f7fc fa92 	bl	800087c <__aeabi_dcmpge>
 8004358:	2800      	cmp	r0, #0
 800435a:	d139      	bne.n	80043d0 <__kernel_rem_pio2+0x2e0>
 800435c:	9002      	str	r0, [sp, #8]
 800435e:	2200      	movs	r2, #0
 8004360:	2300      	movs	r3, #0
 8004362:	4630      	mov	r0, r6
 8004364:	4639      	mov	r1, r7
 8004366:	f7fc fa6b 	bl	8000840 <__aeabi_dcmpeq>
 800436a:	2800      	cmp	r0, #0
 800436c:	f000 80b4 	beq.w	80044d8 <__kernel_rem_pio2+0x3e8>
 8004370:	f104 3bff 	add.w	fp, r4, #4294967295
 8004374:	465b      	mov	r3, fp
 8004376:	2200      	movs	r2, #0
 8004378:	9904      	ldr	r1, [sp, #16]
 800437a:	428b      	cmp	r3, r1
 800437c:	da65      	bge.n	800444a <__kernel_rem_pio2+0x35a>
 800437e:	2a00      	cmp	r2, #0
 8004380:	d07b      	beq.n	800447a <__kernel_rem_pio2+0x38a>
 8004382:	ab0c      	add	r3, sp, #48	; 0x30
 8004384:	f1aa 0a18 	sub.w	sl, sl, #24
 8004388:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80a0 	beq.w	80044d2 <__kernel_rem_pio2+0x3e2>
 8004392:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8004418 <__kernel_rem_pio2+0x328>
 8004396:	4650      	mov	r0, sl
 8004398:	f000 fb32 	bl	8004a00 <scalbn>
 800439c:	4f23      	ldr	r7, [pc, #140]	; (800442c <__kernel_rem_pio2+0x33c>)
 800439e:	ec55 4b10 	vmov	r4, r5, d0
 80043a2:	46d8      	mov	r8, fp
 80043a4:	2600      	movs	r6, #0
 80043a6:	f1b8 0f00 	cmp.w	r8, #0
 80043aa:	f280 80cf 	bge.w	800454c <__kernel_rem_pio2+0x45c>
 80043ae:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8004410 <__kernel_rem_pio2+0x320>
 80043b2:	465f      	mov	r7, fp
 80043b4:	f04f 0800 	mov.w	r8, #0
 80043b8:	2f00      	cmp	r7, #0
 80043ba:	f2c0 80fd 	blt.w	80045b8 <__kernel_rem_pio2+0x4c8>
 80043be:	ab70      	add	r3, sp, #448	; 0x1c0
 80043c0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004438 <__kernel_rem_pio2+0x348>
 80043c4:	ec55 4b18 	vmov	r4, r5, d8
 80043c8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80043cc:	2600      	movs	r6, #0
 80043ce:	e0e5      	b.n	800459c <__kernel_rem_pio2+0x4ac>
 80043d0:	2302      	movs	r3, #2
 80043d2:	9302      	str	r3, [sp, #8]
 80043d4:	e75c      	b.n	8004290 <__kernel_rem_pio2+0x1a0>
 80043d6:	f8db 3000 	ldr.w	r3, [fp]
 80043da:	b955      	cbnz	r5, 80043f2 <__kernel_rem_pio2+0x302>
 80043dc:	b123      	cbz	r3, 80043e8 <__kernel_rem_pio2+0x2f8>
 80043de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80043e2:	f8cb 3000 	str.w	r3, [fp]
 80043e6:	2301      	movs	r3, #1
 80043e8:	3201      	adds	r2, #1
 80043ea:	f10b 0b04 	add.w	fp, fp, #4
 80043ee:	461d      	mov	r5, r3
 80043f0:	e755      	b.n	800429e <__kernel_rem_pio2+0x1ae>
 80043f2:	1acb      	subs	r3, r1, r3
 80043f4:	f8cb 3000 	str.w	r3, [fp]
 80043f8:	462b      	mov	r3, r5
 80043fa:	e7f5      	b.n	80043e8 <__kernel_rem_pio2+0x2f8>
 80043fc:	1e62      	subs	r2, r4, #1
 80043fe:	ab0c      	add	r3, sp, #48	; 0x30
 8004400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004404:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004408:	a90c      	add	r1, sp, #48	; 0x30
 800440a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800440e:	e754      	b.n	80042ba <__kernel_rem_pio2+0x1ca>
	...
 800441c:	3ff00000 	.word	0x3ff00000
 8004420:	08004d00 	.word	0x08004d00
 8004424:	40200000 	.word	0x40200000
 8004428:	3ff00000 	.word	0x3ff00000
 800442c:	3e700000 	.word	0x3e700000
 8004430:	41700000 	.word	0x41700000
 8004434:	3fe00000 	.word	0x3fe00000
 8004438:	08004cc0 	.word	0x08004cc0
 800443c:	1e62      	subs	r2, r4, #1
 800443e:	ab0c      	add	r3, sp, #48	; 0x30
 8004440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004444:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004448:	e7de      	b.n	8004408 <__kernel_rem_pio2+0x318>
 800444a:	a90c      	add	r1, sp, #48	; 0x30
 800444c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004450:	3b01      	subs	r3, #1
 8004452:	430a      	orrs	r2, r1
 8004454:	e790      	b.n	8004378 <__kernel_rem_pio2+0x288>
 8004456:	3301      	adds	r3, #1
 8004458:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800445c:	2900      	cmp	r1, #0
 800445e:	d0fa      	beq.n	8004456 <__kernel_rem_pio2+0x366>
 8004460:	9a08      	ldr	r2, [sp, #32]
 8004462:	18e3      	adds	r3, r4, r3
 8004464:	18a6      	adds	r6, r4, r2
 8004466:	aa20      	add	r2, sp, #128	; 0x80
 8004468:	1c65      	adds	r5, r4, #1
 800446a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800446e:	9302      	str	r3, [sp, #8]
 8004470:	9b02      	ldr	r3, [sp, #8]
 8004472:	42ab      	cmp	r3, r5
 8004474:	da04      	bge.n	8004480 <__kernel_rem_pio2+0x390>
 8004476:	461c      	mov	r4, r3
 8004478:	e6b5      	b.n	80041e6 <__kernel_rem_pio2+0xf6>
 800447a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800447c:	2301      	movs	r3, #1
 800447e:	e7eb      	b.n	8004458 <__kernel_rem_pio2+0x368>
 8004480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004486:	f7fc f91b 	bl	80006c0 <__aeabi_i2d>
 800448a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800448e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004490:	46b3      	mov	fp, r6
 8004492:	461c      	mov	r4, r3
 8004494:	2700      	movs	r7, #0
 8004496:	f04f 0800 	mov.w	r8, #0
 800449a:	f04f 0900 	mov.w	r9, #0
 800449e:	9b06      	ldr	r3, [sp, #24]
 80044a0:	429f      	cmp	r7, r3
 80044a2:	dd06      	ble.n	80044b2 <__kernel_rem_pio2+0x3c2>
 80044a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80044a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80044aa:	e9c3 8900 	strd	r8, r9, [r3]
 80044ae:	3501      	adds	r5, #1
 80044b0:	e7de      	b.n	8004470 <__kernel_rem_pio2+0x380>
 80044b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80044b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80044ba:	f7fb fe85 	bl	80001c8 <__aeabi_dmul>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4640      	mov	r0, r8
 80044c4:	4649      	mov	r1, r9
 80044c6:	f7fb ffaf 	bl	8000428 <__adddf3>
 80044ca:	3701      	adds	r7, #1
 80044cc:	4680      	mov	r8, r0
 80044ce:	4689      	mov	r9, r1
 80044d0:	e7e5      	b.n	800449e <__kernel_rem_pio2+0x3ae>
 80044d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044d6:	e754      	b.n	8004382 <__kernel_rem_pio2+0x292>
 80044d8:	ec47 6b10 	vmov	d0, r6, r7
 80044dc:	f1ca 0000 	rsb	r0, sl, #0
 80044e0:	f000 fa8e 	bl	8004a00 <scalbn>
 80044e4:	ec57 6b10 	vmov	r6, r7, d0
 80044e8:	4b9f      	ldr	r3, [pc, #636]	; (8004768 <__kernel_rem_pio2+0x678>)
 80044ea:	ee10 0a10 	vmov	r0, s0
 80044ee:	2200      	movs	r2, #0
 80044f0:	4639      	mov	r1, r7
 80044f2:	f7fc f9c3 	bl	800087c <__aeabi_dcmpge>
 80044f6:	b300      	cbz	r0, 800453a <__kernel_rem_pio2+0x44a>
 80044f8:	4b9c      	ldr	r3, [pc, #624]	; (800476c <__kernel_rem_pio2+0x67c>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	4630      	mov	r0, r6
 80044fe:	4639      	mov	r1, r7
 8004500:	f7fb fe62 	bl	80001c8 <__aeabi_dmul>
 8004504:	f7fc f9ce 	bl	80008a4 <__aeabi_d2iz>
 8004508:	4605      	mov	r5, r0
 800450a:	f7fc f8d9 	bl	80006c0 <__aeabi_i2d>
 800450e:	4b96      	ldr	r3, [pc, #600]	; (8004768 <__kernel_rem_pio2+0x678>)
 8004510:	2200      	movs	r2, #0
 8004512:	f7fb fe59 	bl	80001c8 <__aeabi_dmul>
 8004516:	460b      	mov	r3, r1
 8004518:	4602      	mov	r2, r0
 800451a:	4639      	mov	r1, r7
 800451c:	4630      	mov	r0, r6
 800451e:	f7fb ff81 	bl	8000424 <__aeabi_dsub>
 8004522:	f7fc f9bf 	bl	80008a4 <__aeabi_d2iz>
 8004526:	f104 0b01 	add.w	fp, r4, #1
 800452a:	ab0c      	add	r3, sp, #48	; 0x30
 800452c:	f10a 0a18 	add.w	sl, sl, #24
 8004530:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004534:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8004538:	e72b      	b.n	8004392 <__kernel_rem_pio2+0x2a2>
 800453a:	4630      	mov	r0, r6
 800453c:	4639      	mov	r1, r7
 800453e:	f7fc f9b1 	bl	80008a4 <__aeabi_d2iz>
 8004542:	ab0c      	add	r3, sp, #48	; 0x30
 8004544:	46a3      	mov	fp, r4
 8004546:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800454a:	e722      	b.n	8004392 <__kernel_rem_pio2+0x2a2>
 800454c:	ab70      	add	r3, sp, #448	; 0x1c0
 800454e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8004552:	ab0c      	add	r3, sp, #48	; 0x30
 8004554:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004558:	f7fc f8b2 	bl	80006c0 <__aeabi_i2d>
 800455c:	4622      	mov	r2, r4
 800455e:	462b      	mov	r3, r5
 8004560:	f7fb fe32 	bl	80001c8 <__aeabi_dmul>
 8004564:	4632      	mov	r2, r6
 8004566:	e9c9 0100 	strd	r0, r1, [r9]
 800456a:	463b      	mov	r3, r7
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7fb fe2a 	bl	80001c8 <__aeabi_dmul>
 8004574:	f108 38ff 	add.w	r8, r8, #4294967295
 8004578:	4604      	mov	r4, r0
 800457a:	460d      	mov	r5, r1
 800457c:	e713      	b.n	80043a6 <__kernel_rem_pio2+0x2b6>
 800457e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004582:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004586:	f7fb fe1f 	bl	80001c8 <__aeabi_dmul>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4620      	mov	r0, r4
 8004590:	4629      	mov	r1, r5
 8004592:	f7fb ff49 	bl	8000428 <__adddf3>
 8004596:	3601      	adds	r6, #1
 8004598:	4604      	mov	r4, r0
 800459a:	460d      	mov	r5, r1
 800459c:	9b04      	ldr	r3, [sp, #16]
 800459e:	429e      	cmp	r6, r3
 80045a0:	dc01      	bgt.n	80045a6 <__kernel_rem_pio2+0x4b6>
 80045a2:	45b0      	cmp	r8, r6
 80045a4:	daeb      	bge.n	800457e <__kernel_rem_pio2+0x48e>
 80045a6:	ab48      	add	r3, sp, #288	; 0x120
 80045a8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80045ac:	e9c3 4500 	strd	r4, r5, [r3]
 80045b0:	3f01      	subs	r7, #1
 80045b2:	f108 0801 	add.w	r8, r8, #1
 80045b6:	e6ff      	b.n	80043b8 <__kernel_rem_pio2+0x2c8>
 80045b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	dc0b      	bgt.n	80045d6 <__kernel_rem_pio2+0x4e6>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	dc6e      	bgt.n	80046a0 <__kernel_rem_pio2+0x5b0>
 80045c2:	d045      	beq.n	8004650 <__kernel_rem_pio2+0x560>
 80045c4:	9b07      	ldr	r3, [sp, #28]
 80045c6:	f003 0007 	and.w	r0, r3, #7
 80045ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80045ce:	ecbd 8b02 	vpop	{d8}
 80045d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d1f3      	bne.n	80045c4 <__kernel_rem_pio2+0x4d4>
 80045dc:	ab48      	add	r3, sp, #288	; 0x120
 80045de:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80045e2:	46d0      	mov	r8, sl
 80045e4:	46d9      	mov	r9, fp
 80045e6:	f1b9 0f00 	cmp.w	r9, #0
 80045ea:	f1a8 0808 	sub.w	r8, r8, #8
 80045ee:	dc64      	bgt.n	80046ba <__kernel_rem_pio2+0x5ca>
 80045f0:	465c      	mov	r4, fp
 80045f2:	2c01      	cmp	r4, #1
 80045f4:	f1aa 0a08 	sub.w	sl, sl, #8
 80045f8:	dc7e      	bgt.n	80046f8 <__kernel_rem_pio2+0x608>
 80045fa:	2000      	movs	r0, #0
 80045fc:	2100      	movs	r1, #0
 80045fe:	f1bb 0f01 	cmp.w	fp, #1
 8004602:	f300 8097 	bgt.w	8004734 <__kernel_rem_pio2+0x644>
 8004606:	9b02      	ldr	r3, [sp, #8]
 8004608:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800460c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 8099 	bne.w	8004748 <__kernel_rem_pio2+0x658>
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	e9c3 5600 	strd	r5, r6, [r3]
 800461c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004620:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004624:	e7ce      	b.n	80045c4 <__kernel_rem_pio2+0x4d4>
 8004626:	ab48      	add	r3, sp, #288	; 0x120
 8004628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f7fb fefa 	bl	8000428 <__adddf3>
 8004634:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004638:	f1bb 0f00 	cmp.w	fp, #0
 800463c:	daf3      	bge.n	8004626 <__kernel_rem_pio2+0x536>
 800463e:	9b02      	ldr	r3, [sp, #8]
 8004640:	b113      	cbz	r3, 8004648 <__kernel_rem_pio2+0x558>
 8004642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004646:	4619      	mov	r1, r3
 8004648:	9b01      	ldr	r3, [sp, #4]
 800464a:	e9c3 0100 	strd	r0, r1, [r3]
 800464e:	e7b9      	b.n	80045c4 <__kernel_rem_pio2+0x4d4>
 8004650:	2000      	movs	r0, #0
 8004652:	2100      	movs	r1, #0
 8004654:	e7f0      	b.n	8004638 <__kernel_rem_pio2+0x548>
 8004656:	ab48      	add	r3, sp, #288	; 0x120
 8004658:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb fee2 	bl	8000428 <__adddf3>
 8004664:	3c01      	subs	r4, #1
 8004666:	2c00      	cmp	r4, #0
 8004668:	daf5      	bge.n	8004656 <__kernel_rem_pio2+0x566>
 800466a:	9b02      	ldr	r3, [sp, #8]
 800466c:	b1e3      	cbz	r3, 80046a8 <__kernel_rem_pio2+0x5b8>
 800466e:	4602      	mov	r2, r0
 8004670:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004674:	9c01      	ldr	r4, [sp, #4]
 8004676:	e9c4 2300 	strd	r2, r3, [r4]
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004682:	f7fb fecf 	bl	8000424 <__aeabi_dsub>
 8004686:	ad4a      	add	r5, sp, #296	; 0x128
 8004688:	2401      	movs	r4, #1
 800468a:	45a3      	cmp	fp, r4
 800468c:	da0f      	bge.n	80046ae <__kernel_rem_pio2+0x5be>
 800468e:	9b02      	ldr	r3, [sp, #8]
 8004690:	b113      	cbz	r3, 8004698 <__kernel_rem_pio2+0x5a8>
 8004692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004696:	4619      	mov	r1, r3
 8004698:	9b01      	ldr	r3, [sp, #4]
 800469a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800469e:	e791      	b.n	80045c4 <__kernel_rem_pio2+0x4d4>
 80046a0:	465c      	mov	r4, fp
 80046a2:	2000      	movs	r0, #0
 80046a4:	2100      	movs	r1, #0
 80046a6:	e7de      	b.n	8004666 <__kernel_rem_pio2+0x576>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e7e2      	b.n	8004674 <__kernel_rem_pio2+0x584>
 80046ae:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80046b2:	f7fb feb9 	bl	8000428 <__adddf3>
 80046b6:	3401      	adds	r4, #1
 80046b8:	e7e7      	b.n	800468a <__kernel_rem_pio2+0x59a>
 80046ba:	e9d8 4500 	ldrd	r4, r5, [r8]
 80046be:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80046c2:	4620      	mov	r0, r4
 80046c4:	4632      	mov	r2, r6
 80046c6:	463b      	mov	r3, r7
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7fb fead 	bl	8000428 <__adddf3>
 80046ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4620      	mov	r0, r4
 80046d8:	4629      	mov	r1, r5
 80046da:	f7fb fea3 	bl	8000424 <__aeabi_dsub>
 80046de:	4632      	mov	r2, r6
 80046e0:	463b      	mov	r3, r7
 80046e2:	f7fb fea1 	bl	8000428 <__adddf3>
 80046e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80046ea:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80046ee:	ed88 7b00 	vstr	d7, [r8]
 80046f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80046f6:	e776      	b.n	80045e6 <__kernel_rem_pio2+0x4f6>
 80046f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80046fc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004700:	4640      	mov	r0, r8
 8004702:	4632      	mov	r2, r6
 8004704:	463b      	mov	r3, r7
 8004706:	4649      	mov	r1, r9
 8004708:	f7fb fe8e 	bl	8000428 <__adddf3>
 800470c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4640      	mov	r0, r8
 8004716:	4649      	mov	r1, r9
 8004718:	f7fb fe84 	bl	8000424 <__aeabi_dsub>
 800471c:	4632      	mov	r2, r6
 800471e:	463b      	mov	r3, r7
 8004720:	f7fb fe82 	bl	8000428 <__adddf3>
 8004724:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004728:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800472c:	ed8a 7b00 	vstr	d7, [sl]
 8004730:	3c01      	subs	r4, #1
 8004732:	e75e      	b.n	80045f2 <__kernel_rem_pio2+0x502>
 8004734:	ab48      	add	r3, sp, #288	; 0x120
 8004736:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb fe73 	bl	8000428 <__adddf3>
 8004742:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004746:	e75a      	b.n	80045fe <__kernel_rem_pio2+0x50e>
 8004748:	9b01      	ldr	r3, [sp, #4]
 800474a:	9a01      	ldr	r2, [sp, #4]
 800474c:	601d      	str	r5, [r3, #0]
 800474e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004752:	605c      	str	r4, [r3, #4]
 8004754:	609f      	str	r7, [r3, #8]
 8004756:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800475a:	60d3      	str	r3, [r2, #12]
 800475c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004760:	6110      	str	r0, [r2, #16]
 8004762:	6153      	str	r3, [r2, #20]
 8004764:	e72e      	b.n	80045c4 <__kernel_rem_pio2+0x4d4>
 8004766:	bf00      	nop
 8004768:	41700000 	.word	0x41700000
 800476c:	3e700000 	.word	0x3e700000

08004770 <__kernel_sin>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	ed2d 8b04 	vpush	{d8-d9}
 8004778:	eeb0 8a41 	vmov.f32	s16, s2
 800477c:	eef0 8a61 	vmov.f32	s17, s3
 8004780:	ec55 4b10 	vmov	r4, r5, d0
 8004784:	b083      	sub	sp, #12
 8004786:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800478a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800478e:	9001      	str	r0, [sp, #4]
 8004790:	da06      	bge.n	80047a0 <__kernel_sin+0x30>
 8004792:	ee10 0a10 	vmov	r0, s0
 8004796:	4629      	mov	r1, r5
 8004798:	f7fc f884 	bl	80008a4 <__aeabi_d2iz>
 800479c:	2800      	cmp	r0, #0
 800479e:	d051      	beq.n	8004844 <__kernel_sin+0xd4>
 80047a0:	4622      	mov	r2, r4
 80047a2:	462b      	mov	r3, r5
 80047a4:	4620      	mov	r0, r4
 80047a6:	4629      	mov	r1, r5
 80047a8:	f7fb fd0e 	bl	80001c8 <__aeabi_dmul>
 80047ac:	4682      	mov	sl, r0
 80047ae:	468b      	mov	fp, r1
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4620      	mov	r0, r4
 80047b6:	4629      	mov	r1, r5
 80047b8:	f7fb fd06 	bl	80001c8 <__aeabi_dmul>
 80047bc:	a341      	add	r3, pc, #260	; (adr r3, 80048c4 <__kernel_sin+0x154>)
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	4680      	mov	r8, r0
 80047c4:	4689      	mov	r9, r1
 80047c6:	4650      	mov	r0, sl
 80047c8:	4659      	mov	r1, fp
 80047ca:	f7fb fcfd 	bl	80001c8 <__aeabi_dmul>
 80047ce:	a33f      	add	r3, pc, #252	; (adr r3, 80048cc <__kernel_sin+0x15c>)
 80047d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d4:	f7fb fe26 	bl	8000424 <__aeabi_dsub>
 80047d8:	4652      	mov	r2, sl
 80047da:	465b      	mov	r3, fp
 80047dc:	f7fb fcf4 	bl	80001c8 <__aeabi_dmul>
 80047e0:	a33c      	add	r3, pc, #240	; (adr r3, 80048d4 <__kernel_sin+0x164>)
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f7fb fe1f 	bl	8000428 <__adddf3>
 80047ea:	4652      	mov	r2, sl
 80047ec:	465b      	mov	r3, fp
 80047ee:	f7fb fceb 	bl	80001c8 <__aeabi_dmul>
 80047f2:	a33a      	add	r3, pc, #232	; (adr r3, 80048dc <__kernel_sin+0x16c>)
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f7fb fe14 	bl	8000424 <__aeabi_dsub>
 80047fc:	4652      	mov	r2, sl
 80047fe:	465b      	mov	r3, fp
 8004800:	f7fb fce2 	bl	80001c8 <__aeabi_dmul>
 8004804:	a337      	add	r3, pc, #220	; (adr r3, 80048e4 <__kernel_sin+0x174>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f7fb fe0d 	bl	8000428 <__adddf3>
 800480e:	9b01      	ldr	r3, [sp, #4]
 8004810:	4606      	mov	r6, r0
 8004812:	460f      	mov	r7, r1
 8004814:	b9eb      	cbnz	r3, 8004852 <__kernel_sin+0xe2>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4650      	mov	r0, sl
 800481c:	4659      	mov	r1, fp
 800481e:	f7fb fcd3 	bl	80001c8 <__aeabi_dmul>
 8004822:	a325      	add	r3, pc, #148	; (adr r3, 80048b8 <__kernel_sin+0x148>)
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f7fb fdfc 	bl	8000424 <__aeabi_dsub>
 800482c:	4642      	mov	r2, r8
 800482e:	464b      	mov	r3, r9
 8004830:	f7fb fcca 	bl	80001c8 <__aeabi_dmul>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4620      	mov	r0, r4
 800483a:	4629      	mov	r1, r5
 800483c:	f7fb fdf4 	bl	8000428 <__adddf3>
 8004840:	4604      	mov	r4, r0
 8004842:	460d      	mov	r5, r1
 8004844:	ec45 4b10 	vmov	d0, r4, r5
 8004848:	b003      	add	sp, #12
 800484a:	ecbd 8b04 	vpop	{d8-d9}
 800484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004852:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <__kernel_sin+0x150>)
 8004854:	ec51 0b18 	vmov	r0, r1, d8
 8004858:	2200      	movs	r2, #0
 800485a:	f7fb fcb5 	bl	80001c8 <__aeabi_dmul>
 800485e:	4632      	mov	r2, r6
 8004860:	ec41 0b19 	vmov	d9, r0, r1
 8004864:	463b      	mov	r3, r7
 8004866:	4640      	mov	r0, r8
 8004868:	4649      	mov	r1, r9
 800486a:	f7fb fcad 	bl	80001c8 <__aeabi_dmul>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	ec51 0b19 	vmov	r0, r1, d9
 8004876:	f7fb fdd5 	bl	8000424 <__aeabi_dsub>
 800487a:	4652      	mov	r2, sl
 800487c:	465b      	mov	r3, fp
 800487e:	f7fb fca3 	bl	80001c8 <__aeabi_dmul>
 8004882:	ec53 2b18 	vmov	r2, r3, d8
 8004886:	f7fb fdcd 	bl	8000424 <__aeabi_dsub>
 800488a:	a30b      	add	r3, pc, #44	; (adr r3, 80048b8 <__kernel_sin+0x148>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	4606      	mov	r6, r0
 8004892:	460f      	mov	r7, r1
 8004894:	4640      	mov	r0, r8
 8004896:	4649      	mov	r1, r9
 8004898:	f7fb fc96 	bl	80001c8 <__aeabi_dmul>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4630      	mov	r0, r6
 80048a2:	4639      	mov	r1, r7
 80048a4:	f7fb fdc0 	bl	8000428 <__adddf3>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4620      	mov	r0, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	f7fb fdb8 	bl	8000424 <__aeabi_dsub>
 80048b4:	e7c4      	b.n	8004840 <__kernel_sin+0xd0>
 80048b6:	bf00      	nop
 80048b8:	55555549 	.word	0x55555549
 80048bc:	3fc55555 	.word	0x3fc55555
 80048c0:	3fe00000 	.word	0x3fe00000
 80048c4:	5acfd57c 	.word	0x5acfd57c
 80048c8:	3de5d93a 	.word	0x3de5d93a
 80048cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80048d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80048d4:	57b1fe7d 	.word	0x57b1fe7d
 80048d8:	3ec71de3 	.word	0x3ec71de3
 80048dc:	19c161d5 	.word	0x19c161d5
 80048e0:	3f2a01a0 	.word	0x3f2a01a0
 80048e4:	1110f8a6 	.word	0x1110f8a6
 80048e8:	3f811111 	.word	0x3f811111

080048ec <fabs>:
 80048ec:	ec51 0b10 	vmov	r0, r1, d0
 80048f0:	ee10 2a10 	vmov	r2, s0
 80048f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80048f8:	ec43 2b10 	vmov	d0, r2, r3
 80048fc:	4770      	bx	lr
	...

08004900 <floor>:
 8004900:	ec51 0b10 	vmov	r0, r1, d0
 8004904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800490c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004910:	2e13      	cmp	r6, #19
 8004912:	ee10 5a10 	vmov	r5, s0
 8004916:	ee10 8a10 	vmov	r8, s0
 800491a:	460c      	mov	r4, r1
 800491c:	dc32      	bgt.n	8004984 <floor+0x84>
 800491e:	2e00      	cmp	r6, #0
 8004920:	da14      	bge.n	800494c <floor+0x4c>
 8004922:	a333      	add	r3, pc, #204	; (adr r3, 80049f0 <floor+0xf0>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb fd7e 	bl	8000428 <__adddf3>
 800492c:	2200      	movs	r2, #0
 800492e:	2300      	movs	r3, #0
 8004930:	f7fb ffae 	bl	8000890 <__aeabi_dcmpgt>
 8004934:	b138      	cbz	r0, 8004946 <floor+0x46>
 8004936:	2c00      	cmp	r4, #0
 8004938:	da57      	bge.n	80049ea <floor+0xea>
 800493a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800493e:	431d      	orrs	r5, r3
 8004940:	d001      	beq.n	8004946 <floor+0x46>
 8004942:	4c2d      	ldr	r4, [pc, #180]	; (80049f8 <floor+0xf8>)
 8004944:	2500      	movs	r5, #0
 8004946:	4621      	mov	r1, r4
 8004948:	4628      	mov	r0, r5
 800494a:	e025      	b.n	8004998 <floor+0x98>
 800494c:	4f2b      	ldr	r7, [pc, #172]	; (80049fc <floor+0xfc>)
 800494e:	4137      	asrs	r7, r6
 8004950:	ea01 0307 	and.w	r3, r1, r7
 8004954:	4303      	orrs	r3, r0
 8004956:	d01f      	beq.n	8004998 <floor+0x98>
 8004958:	a325      	add	r3, pc, #148	; (adr r3, 80049f0 <floor+0xf0>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f7fb fd63 	bl	8000428 <__adddf3>
 8004962:	2200      	movs	r2, #0
 8004964:	2300      	movs	r3, #0
 8004966:	f7fb ff93 	bl	8000890 <__aeabi_dcmpgt>
 800496a:	2800      	cmp	r0, #0
 800496c:	d0eb      	beq.n	8004946 <floor+0x46>
 800496e:	2c00      	cmp	r4, #0
 8004970:	bfbe      	ittt	lt
 8004972:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004976:	fa43 f606 	asrlt.w	r6, r3, r6
 800497a:	19a4      	addlt	r4, r4, r6
 800497c:	ea24 0407 	bic.w	r4, r4, r7
 8004980:	2500      	movs	r5, #0
 8004982:	e7e0      	b.n	8004946 <floor+0x46>
 8004984:	2e33      	cmp	r6, #51	; 0x33
 8004986:	dd0b      	ble.n	80049a0 <floor+0xa0>
 8004988:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800498c:	d104      	bne.n	8004998 <floor+0x98>
 800498e:	ee10 2a10 	vmov	r2, s0
 8004992:	460b      	mov	r3, r1
 8004994:	f7fb fd48 	bl	8000428 <__adddf3>
 8004998:	ec41 0b10 	vmov	d0, r0, r1
 800499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80049a4:	f04f 33ff 	mov.w	r3, #4294967295
 80049a8:	fa23 f707 	lsr.w	r7, r3, r7
 80049ac:	4207      	tst	r7, r0
 80049ae:	d0f3      	beq.n	8004998 <floor+0x98>
 80049b0:	a30f      	add	r3, pc, #60	; (adr r3, 80049f0 <floor+0xf0>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fd37 	bl	8000428 <__adddf3>
 80049ba:	2200      	movs	r2, #0
 80049bc:	2300      	movs	r3, #0
 80049be:	f7fb ff67 	bl	8000890 <__aeabi_dcmpgt>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d0bf      	beq.n	8004946 <floor+0x46>
 80049c6:	2c00      	cmp	r4, #0
 80049c8:	da02      	bge.n	80049d0 <floor+0xd0>
 80049ca:	2e14      	cmp	r6, #20
 80049cc:	d103      	bne.n	80049d6 <floor+0xd6>
 80049ce:	3401      	adds	r4, #1
 80049d0:	ea25 0507 	bic.w	r5, r5, r7
 80049d4:	e7b7      	b.n	8004946 <floor+0x46>
 80049d6:	2301      	movs	r3, #1
 80049d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80049dc:	fa03 f606 	lsl.w	r6, r3, r6
 80049e0:	4435      	add	r5, r6
 80049e2:	4545      	cmp	r5, r8
 80049e4:	bf38      	it	cc
 80049e6:	18e4      	addcc	r4, r4, r3
 80049e8:	e7f2      	b.n	80049d0 <floor+0xd0>
 80049ea:	2500      	movs	r5, #0
 80049ec:	462c      	mov	r4, r5
 80049ee:	e7aa      	b.n	8004946 <floor+0x46>
 80049f0:	8800759c 	.word	0x8800759c
 80049f4:	7e37e43c 	.word	0x7e37e43c
 80049f8:	bff00000 	.word	0xbff00000
 80049fc:	000fffff 	.word	0x000fffff

08004a00 <scalbn>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	ec55 4b10 	vmov	r4, r5, d0
 8004a06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	462b      	mov	r3, r5
 8004a0e:	b99a      	cbnz	r2, 8004a38 <scalbn+0x38>
 8004a10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004a14:	4323      	orrs	r3, r4
 8004a16:	d036      	beq.n	8004a86 <scalbn+0x86>
 8004a18:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <scalbn+0x100>)
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	ee10 0a10 	vmov	r0, s0
 8004a20:	2200      	movs	r2, #0
 8004a22:	f7fb fbd1 	bl	80001c8 <__aeabi_dmul>
 8004a26:	4b37      	ldr	r3, [pc, #220]	; (8004b04 <scalbn+0x104>)
 8004a28:	429e      	cmp	r6, r3
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	460d      	mov	r5, r1
 8004a2e:	da10      	bge.n	8004a52 <scalbn+0x52>
 8004a30:	a32b      	add	r3, pc, #172	; (adr r3, 8004ae0 <scalbn+0xe0>)
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	e03a      	b.n	8004aae <scalbn+0xae>
 8004a38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004a3c:	428a      	cmp	r2, r1
 8004a3e:	d10c      	bne.n	8004a5a <scalbn+0x5a>
 8004a40:	ee10 2a10 	vmov	r2, s0
 8004a44:	4620      	mov	r0, r4
 8004a46:	4629      	mov	r1, r5
 8004a48:	f7fb fcee 	bl	8000428 <__adddf3>
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	460d      	mov	r5, r1
 8004a50:	e019      	b.n	8004a86 <scalbn+0x86>
 8004a52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004a56:	460b      	mov	r3, r1
 8004a58:	3a36      	subs	r2, #54	; 0x36
 8004a5a:	4432      	add	r2, r6
 8004a5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004a60:	428a      	cmp	r2, r1
 8004a62:	dd08      	ble.n	8004a76 <scalbn+0x76>
 8004a64:	2d00      	cmp	r5, #0
 8004a66:	a120      	add	r1, pc, #128	; (adr r1, 8004ae8 <scalbn+0xe8>)
 8004a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a6c:	da1c      	bge.n	8004aa8 <scalbn+0xa8>
 8004a6e:	a120      	add	r1, pc, #128	; (adr r1, 8004af0 <scalbn+0xf0>)
 8004a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a74:	e018      	b.n	8004aa8 <scalbn+0xa8>
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	dd08      	ble.n	8004a8c <scalbn+0x8c>
 8004a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a86:	ec45 4b10 	vmov	d0, r4, r5
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004a90:	da19      	bge.n	8004ac6 <scalbn+0xc6>
 8004a92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004a96:	429e      	cmp	r6, r3
 8004a98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004a9c:	dd0a      	ble.n	8004ab4 <scalbn+0xb4>
 8004a9e:	a112      	add	r1, pc, #72	; (adr r1, 8004ae8 <scalbn+0xe8>)
 8004aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e2      	bne.n	8004a6e <scalbn+0x6e>
 8004aa8:	a30f      	add	r3, pc, #60	; (adr r3, 8004ae8 <scalbn+0xe8>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f7fb fb8b 	bl	80001c8 <__aeabi_dmul>
 8004ab2:	e7cb      	b.n	8004a4c <scalbn+0x4c>
 8004ab4:	a10a      	add	r1, pc, #40	; (adr r1, 8004ae0 <scalbn+0xe0>)
 8004ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0b8      	beq.n	8004a30 <scalbn+0x30>
 8004abe:	a10e      	add	r1, pc, #56	; (adr r1, 8004af8 <scalbn+0xf8>)
 8004ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ac4:	e7b4      	b.n	8004a30 <scalbn+0x30>
 8004ac6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004aca:	3236      	adds	r2, #54	; 0x36
 8004acc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ad0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <scalbn+0x108>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	e7e8      	b.n	8004aae <scalbn+0xae>
 8004adc:	f3af 8000 	nop.w
 8004ae0:	c2f8f359 	.word	0xc2f8f359
 8004ae4:	01a56e1f 	.word	0x01a56e1f
 8004ae8:	8800759c 	.word	0x8800759c
 8004aec:	7e37e43c 	.word	0x7e37e43c
 8004af0:	8800759c 	.word	0x8800759c
 8004af4:	fe37e43c 	.word	0xfe37e43c
 8004af8:	c2f8f359 	.word	0xc2f8f359
 8004afc:	81a56e1f 	.word	0x81a56e1f
 8004b00:	43500000 	.word	0x43500000
 8004b04:	ffff3cb0 	.word	0xffff3cb0
 8004b08:	3c900000 	.word	0x3c900000

08004b0c <_init>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	bf00      	nop
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr

08004b18 <_fini>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	bf00      	nop
 8004b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1e:	bc08      	pop	{r3}
 8004b20:	469e      	mov	lr, r3
 8004b22:	4770      	bx	lr
